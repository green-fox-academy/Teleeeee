
distance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000816  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000748  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ae  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d6  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c0  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000198e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_1>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_14>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a1 30       	cpi	r26, 0x01	; 1
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>
  88:	0e 94 81 00 	call	0x102	; 0x102 <main>
  8c:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <__vector_1>:
#include <avr/interrupt.h>


volatile uint8_t i = 0;

ISR(INT0_vect){
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	8f 93       	push	r24
	cli();
  a0:	f8 94       	cli
	PIND = 1 << 1;
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	89 b9       	out	0x09, r24	; 9
	TCCR0B = 0;
  a6:	15 bc       	out	0x25, r1	; 37
	PORTD = 0;
  a8:	1b b8       	out	0x0b, r1	; 11
	i = 0;
  aa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
}
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_14>:

ISR(TIMER0_COMPA_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
	i++;
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <external_interrupt_setup>:

void external_interrupt_setup(){
	DDRD |= 1 << 1;
  dc:	51 9a       	sbi	0x0a, 1	; 10
	EICRA = 0b00000011;
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK |= 1 << 0;
  e4:	e8 9a       	sbi	0x1d, 0	; 29
  e6:	08 95       	ret

000000e8 <mesurement_start>:
}

void mesurement_start(){
	TIMSK0 = 0b00000010; //match OCR0A interrupt enable
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0A = 0b00000000;
  ee:	14 bc       	out	0x24, r1	; 36
	sei();
  f0:	78 94       	sei
	OCR0A = 127;
  f2:	9f e7       	ldi	r25, 0x7F	; 127
  f4:	97 bd       	out	0x27, r25	; 39
	PIND = 1 << 1;
  f6:	89 b9       	out	0x09, r24	; 9
	TCCR0A = 0b11000000;
  f8:	80 ec       	ldi	r24, 0xC0	; 192
  fa:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000001;  // prescale
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	85 bd       	out	0x25, r24	; 37
 100:	08 95       	ret

00000102 <main>:
}

int main(void)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	00 d0       	rcall	.+0      	; 0x108 <main+0x6>
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t k =0;
 10c:	1a 82       	std	Y+2, r1	; 0x02
 10e:	19 82       	std	Y+1, r1	; 0x01
	external_interrupt_setup();
 110:	0e 94 6e 00 	call	0xdc	; 0xdc <external_interrupt_setup>
		if(i == 0){
		mesurement_start();
		}
		if(i < 200){
			DDRD |= 1 << 5;
			PIND = 1 << 5;
 114:	10 e2       	ldi	r17, 0x20	; 32
{
	volatile uint16_t k =0;
	external_interrupt_setup();
    while (1) 
    {
		if(i == 0){
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11a:	81 11       	cpse	r24, r1
 11c:	02 c0       	rjmp	.+4      	; 0x122 <main+0x20>
		mesurement_start();
 11e:	0e 94 74 00 	call	0xe8	; 0xe8 <mesurement_start>
		}
		if(i < 200){
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 126:	88 3c       	cpi	r24, 0xC8	; 200
 128:	b0 f7       	brcc	.-20     	; 0x116 <main+0x14>
			DDRD |= 1 << 5;
 12a:	55 9a       	sbi	0x0a, 5	; 10
			PIND = 1 << 5;
 12c:	19 b9       	out	0x09, r17	; 9
 12e:	f3 cf       	rjmp	.-26     	; 0x116 <main+0x14>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
