
utility.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a94  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000810  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003da  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f2  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000469  00000000  00000000  00001ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000234b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 42 00 	call	0x84	; 0x84 <main>
  7c:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <main>:


int main(void)
{
	
	for (uint8_t i = 0; i < 8; i++)
  84:	c0 e0       	ldi	r28, 0x00	; 0
	{
		set_pin_port(i, HIGH, B);
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	8c 2f       	mov	r24, r28
  8c:	0e 94 87 00 	call	0x10e	; 0x10e <set_pin_port>
		set_pin_datadirection(i, HIGH, B);
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	8c 2f       	mov	r24, r28
  96:	0e 94 05 01 	call	0x20a	; 0x20a <set_pin_datadirection>
		set_pin_port(i, HIGH, C);
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	8c 2f       	mov	r24, r28
  a0:	0e 94 87 00 	call	0x10e	; 0x10e <set_pin_port>
		set_pin_datadirection(i, HIGH, C);
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	8c 2f       	mov	r24, r28
  aa:	0e 94 05 01 	call	0x20a	; 0x20a <set_pin_datadirection>
		set_pin_port(i, HIGH, D);
  ae:	42 e0       	ldi	r20, 0x02	; 2
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	8c 2f       	mov	r24, r28
  b4:	0e 94 87 00 	call	0x10e	; 0x10e <set_pin_port>
		set_pin_datadirection(i, HIGH, D);
  b8:	42 e0       	ldi	r20, 0x02	; 2
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	8c 2f       	mov	r24, r28
  be:	0e 94 05 01 	call	0x20a	; 0x20a <set_pin_datadirection>


int main(void)
{
	
	for (uint8_t i = 0; i < 8; i++)
  c2:	cf 5f       	subi	r28, 0xFF	; 255
  c4:	c8 30       	cpi	r28, 0x08	; 8
  c6:	f9 f6       	brne	.-66     	; 0x86 <main+0x2>
  c8:	c0 e0       	ldi	r28, 0x00	; 0
		set_pin_port(i, HIGH, D);
		set_pin_datadirection(i, HIGH, D);
	}
	for (uint8_t i = 0; i < 8; i++)
	{
		set_pin_port(i, LOW, B);
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	8c 2f       	mov	r24, r28
  d0:	0e 94 87 00 	call	0x10e	; 0x10e <set_pin_port>
		set_pin_datadirection(i, LOW, B);
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	8c 2f       	mov	r24, r28
  da:	0e 94 05 01 	call	0x20a	; 0x20a <set_pin_datadirection>
		set_pin_port(i, LOW, C);
  de:	41 e0       	ldi	r20, 0x01	; 1
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	8c 2f       	mov	r24, r28
  e4:	0e 94 87 00 	call	0x10e	; 0x10e <set_pin_port>
		set_pin_datadirection(i, LOW, C);
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	8c 2f       	mov	r24, r28
  ee:	0e 94 05 01 	call	0x20a	; 0x20a <set_pin_datadirection>
		set_pin_port(i, LOW, D);
  f2:	42 e0       	ldi	r20, 0x02	; 2
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	8c 2f       	mov	r24, r28
  f8:	0e 94 87 00 	call	0x10e	; 0x10e <set_pin_port>
		set_pin_datadirection(i, LOW, D);
  fc:	42 e0       	ldi	r20, 0x02	; 2
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	8c 2f       	mov	r24, r28
 102:	0e 94 05 01 	call	0x20a	; 0x20a <set_pin_datadirection>
		set_pin_port(i, HIGH, C);
		set_pin_datadirection(i, HIGH, C);
		set_pin_port(i, HIGH, D);
		set_pin_datadirection(i, HIGH, D);
	}
	for (uint8_t i = 0; i < 8; i++)
 106:	cf 5f       	subi	r28, 0xFF	; 255
 108:	c8 30       	cpi	r28, 0x08	; 8
 10a:	f9 f6       	brne	.-66     	; 0xca <main+0x46>
 10c:	ff cf       	rjmp	.-2      	; 0x10c <main+0x88>

0000010e <set_pin_port>:
#include "utility.h"


void set_pin_port(uint8_t pin_number, enum STATE pin_state, enum PORT_TO_SET port_name){
	switch(port_name){
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	61 f1       	breq	.+88     	; 0x16a <set_pin_port+0x5c>
 112:	20 f0       	brcs	.+8      	; 0x11c <set_pin_port+0xe>
 114:	42 30       	cpi	r20, 0x02	; 2
 116:	09 f4       	brne	.+2      	; 0x11a <set_pin_port+0xc>
 118:	4e c0       	rjmp	.+156    	; 0x1b6 <set_pin_port+0xa8>
 11a:	73 c0       	rjmp	.+230    	; 0x202 <set_pin_port+0xf4>
		case 0 :
		if(pin_state == 1){
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	69 f4       	brne	.+26     	; 0x13a <set_pin_port+0x2c>
			PORTB |= 1 << pin_number;
 120:	45 b1       	in	r20, 0x05	; 5
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	b9 01       	movw	r22, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <set_pin_port+0x20>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	8a 95       	dec	r24
 130:	e2 f7       	brpl	.-8      	; 0x12a <set_pin_port+0x1c>
 132:	cb 01       	movw	r24, r22
 134:	84 2b       	or	r24, r20
 136:	85 b9       	out	0x05, r24	; 5
 138:	08 95       	ret
		};
		if(pin_state == 0){
 13a:	61 11       	cpse	r22, r1
 13c:	65 c0       	rjmp	.+202    	; 0x208 <set_pin_port+0xfa>
			// if PORTB and bit on 1 are the same we need to change it to 0 else its already 0
			if( (PORTB | (1 << pin_number)) == PORTB){
 13e:	45 b1       	in	r20, 0x05	; 5
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	b9 01       	movw	r22, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <set_pin_port+0x3e>
 148:	66 0f       	add	r22, r22
 14a:	77 1f       	adc	r23, r23
 14c:	8a 95       	dec	r24
 14e:	e2 f7       	brpl	.-8      	; 0x148 <set_pin_port+0x3a>
 150:	cb 01       	movw	r24, r22
 152:	25 b1       	in	r18, 0x05	; 5
 154:	64 2b       	or	r22, r20
 156:	ab 01       	movw	r20, r22
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	42 17       	cp	r20, r18
 15c:	53 07       	cpc	r21, r19
 15e:	09 f0       	breq	.+2      	; 0x162 <set_pin_port+0x54>
 160:	53 c0       	rjmp	.+166    	; 0x208 <set_pin_port+0xfa>
				PORTB ^= 1 << pin_number;
 162:	95 b1       	in	r25, 0x05	; 5
 164:	89 27       	eor	r24, r25
 166:	85 b9       	out	0x05, r24	; 5
 168:	08 95       	ret
			}
		}
			break;
		case 1 :
		if(pin_state == 1){
 16a:	61 30       	cpi	r22, 0x01	; 1
 16c:	69 f4       	brne	.+26     	; 0x188 <set_pin_port+0x7a>
			PORTC |= 1 << pin_number;
 16e:	48 b1       	in	r20, 0x08	; 8
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <set_pin_port+0x6e>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	8a 95       	dec	r24
 17e:	e2 f7       	brpl	.-8      	; 0x178 <set_pin_port+0x6a>
 180:	cb 01       	movw	r24, r22
 182:	84 2b       	or	r24, r20
 184:	88 b9       	out	0x08, r24	; 8
 186:	08 95       	ret
		};
		if(pin_state == 0){
 188:	61 11       	cpse	r22, r1
 18a:	3e c0       	rjmp	.+124    	; 0x208 <set_pin_port+0xfa>
			// if PORTB and bit on 1 are the same we need to change it to 0 else its already 0
			if( (PORTC | (1 << pin_number)) == PORTC){
 18c:	48 b1       	in	r20, 0x08	; 8
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	b9 01       	movw	r22, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <set_pin_port+0x8c>
 196:	66 0f       	add	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	8a 95       	dec	r24
 19c:	e2 f7       	brpl	.-8      	; 0x196 <set_pin_port+0x88>
 19e:	cb 01       	movw	r24, r22
 1a0:	28 b1       	in	r18, 0x08	; 8
 1a2:	64 2b       	or	r22, r20
 1a4:	ab 01       	movw	r20, r22
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	42 17       	cp	r20, r18
 1aa:	53 07       	cpc	r21, r19
 1ac:	69 f5       	brne	.+90     	; 0x208 <set_pin_port+0xfa>
				PORTC ^= 1 << pin_number;
 1ae:	98 b1       	in	r25, 0x08	; 8
 1b0:	89 27       	eor	r24, r25
 1b2:	88 b9       	out	0x08, r24	; 8
 1b4:	08 95       	ret
			}
		}
			break;
		case 2 :
		if(pin_state == 1){
 1b6:	61 30       	cpi	r22, 0x01	; 1
 1b8:	69 f4       	brne	.+26     	; 0x1d4 <set_pin_port+0xc6>
			PORTD |= 1 << pin_number;
 1ba:	4b b1       	in	r20, 0x0b	; 11
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	b9 01       	movw	r22, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <set_pin_port+0xba>
 1c4:	66 0f       	add	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	8a 95       	dec	r24
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <set_pin_port+0xb6>
 1cc:	cb 01       	movw	r24, r22
 1ce:	84 2b       	or	r24, r20
 1d0:	8b b9       	out	0x0b, r24	; 11
 1d2:	08 95       	ret
		};
		if(pin_state == 0){
 1d4:	61 11       	cpse	r22, r1
 1d6:	18 c0       	rjmp	.+48     	; 0x208 <set_pin_port+0xfa>
			// if PORTB and bit on 1 are the same we need to change it to 0 else its already 0
			if( (PORTD | (1 << pin_number)) == PORTD){
 1d8:	4b b1       	in	r20, 0x0b	; 11
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	b9 01       	movw	r22, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <set_pin_port+0xd8>
 1e2:	66 0f       	add	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	8a 95       	dec	r24
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <set_pin_port+0xd4>
 1ea:	cb 01       	movw	r24, r22
 1ec:	2b b1       	in	r18, 0x0b	; 11
 1ee:	64 2b       	or	r22, r20
 1f0:	ab 01       	movw	r20, r22
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	42 17       	cp	r20, r18
 1f6:	53 07       	cpc	r21, r19
 1f8:	39 f4       	brne	.+14     	; 0x208 <set_pin_port+0xfa>
				PORTD ^= 1 << pin_number;
 1fa:	9b b1       	in	r25, 0x0b	; 11
 1fc:	89 27       	eor	r24, r25
 1fe:	8b b9       	out	0x0b, r24	; 11
 200:	08 95       	ret
			}
		}
			break;
		default:
			PORTB = PORTC = PORTD = 0;
 202:	1b b8       	out	0x0b, r1	; 11
 204:	18 b8       	out	0x08, r1	; 8
 206:	15 b8       	out	0x05, r1	; 5
 208:	08 95       	ret

0000020a <set_pin_datadirection>:
	}
	
}

void set_pin_datadirection(uint8_t pin_number, enum STATE pin_state, enum PORT_TO_SET port_name){
		switch(port_name){
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	61 f1       	breq	.+88     	; 0x266 <set_pin_datadirection+0x5c>
 20e:	20 f0       	brcs	.+8      	; 0x218 <set_pin_datadirection+0xe>
 210:	42 30       	cpi	r20, 0x02	; 2
 212:	09 f4       	brne	.+2      	; 0x216 <set_pin_datadirection+0xc>
 214:	4e c0       	rjmp	.+156    	; 0x2b2 <set_pin_datadirection+0xa8>
 216:	73 c0       	rjmp	.+230    	; 0x2fe <set_pin_datadirection+0xf4>
			case 0 :
			if(pin_state == 1){
 218:	61 30       	cpi	r22, 0x01	; 1
 21a:	69 f4       	brne	.+26     	; 0x236 <set_pin_datadirection+0x2c>
				DDRB |= 1 << pin_number;
 21c:	44 b1       	in	r20, 0x04	; 4
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	b9 01       	movw	r22, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <set_pin_datadirection+0x20>
 226:	66 0f       	add	r22, r22
 228:	77 1f       	adc	r23, r23
 22a:	8a 95       	dec	r24
 22c:	e2 f7       	brpl	.-8      	; 0x226 <set_pin_datadirection+0x1c>
 22e:	cb 01       	movw	r24, r22
 230:	84 2b       	or	r24, r20
 232:	84 b9       	out	0x04, r24	; 4
 234:	08 95       	ret
			};
			if(pin_state == 0){
 236:	61 11       	cpse	r22, r1
 238:	65 c0       	rjmp	.+202    	; 0x304 <set_pin_datadirection+0xfa>
				// if PORTB and bit on 1 are the same we need to change it to 0 else its already 0
				if( (DDRB | (1 << pin_number)) == DDRB){
 23a:	44 b1       	in	r20, 0x04	; 4
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	b9 01       	movw	r22, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <set_pin_datadirection+0x3e>
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	8a 95       	dec	r24
 24a:	e2 f7       	brpl	.-8      	; 0x244 <set_pin_datadirection+0x3a>
 24c:	cb 01       	movw	r24, r22
 24e:	24 b1       	in	r18, 0x04	; 4
 250:	64 2b       	or	r22, r20
 252:	ab 01       	movw	r20, r22
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	42 17       	cp	r20, r18
 258:	53 07       	cpc	r21, r19
 25a:	09 f0       	breq	.+2      	; 0x25e <set_pin_datadirection+0x54>
 25c:	53 c0       	rjmp	.+166    	; 0x304 <set_pin_datadirection+0xfa>
					DDRB ^= 1 << pin_number;
 25e:	94 b1       	in	r25, 0x04	; 4
 260:	89 27       	eor	r24, r25
 262:	84 b9       	out	0x04, r24	; 4
 264:	08 95       	ret
				}
			}
			break;
			case 1 :
			if(pin_state == 1){
 266:	61 30       	cpi	r22, 0x01	; 1
 268:	69 f4       	brne	.+26     	; 0x284 <set_pin_datadirection+0x7a>
				DDRC |= 1 << pin_number;
 26a:	47 b1       	in	r20, 0x07	; 7
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	b9 01       	movw	r22, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <set_pin_datadirection+0x6e>
 274:	66 0f       	add	r22, r22
 276:	77 1f       	adc	r23, r23
 278:	8a 95       	dec	r24
 27a:	e2 f7       	brpl	.-8      	; 0x274 <set_pin_datadirection+0x6a>
 27c:	cb 01       	movw	r24, r22
 27e:	84 2b       	or	r24, r20
 280:	87 b9       	out	0x07, r24	; 7
 282:	08 95       	ret
			};
			if(pin_state == 0){
 284:	61 11       	cpse	r22, r1
 286:	3e c0       	rjmp	.+124    	; 0x304 <set_pin_datadirection+0xfa>
				// if PORTB and bit on 1 are the same we need to change it to 0 else its already 0
				if( (DDRC | (1 << pin_number)) == DDRC){
 288:	47 b1       	in	r20, 0x07	; 7
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	b9 01       	movw	r22, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <set_pin_datadirection+0x8c>
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	8a 95       	dec	r24
 298:	e2 f7       	brpl	.-8      	; 0x292 <set_pin_datadirection+0x88>
 29a:	cb 01       	movw	r24, r22
 29c:	27 b1       	in	r18, 0x07	; 7
 29e:	64 2b       	or	r22, r20
 2a0:	ab 01       	movw	r20, r22
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	42 17       	cp	r20, r18
 2a6:	53 07       	cpc	r21, r19
 2a8:	69 f5       	brne	.+90     	; 0x304 <set_pin_datadirection+0xfa>
					DDRC ^= 1 << pin_number;
 2aa:	97 b1       	in	r25, 0x07	; 7
 2ac:	89 27       	eor	r24, r25
 2ae:	87 b9       	out	0x07, r24	; 7
 2b0:	08 95       	ret
				}
			}
			break;
			case 2 :
			if(pin_state == 1){
 2b2:	61 30       	cpi	r22, 0x01	; 1
 2b4:	69 f4       	brne	.+26     	; 0x2d0 <set_pin_datadirection+0xc6>
				DDRD |= 1 << pin_number;
 2b6:	4a b1       	in	r20, 0x0a	; 10
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	b9 01       	movw	r22, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <set_pin_datadirection+0xba>
 2c0:	66 0f       	add	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	8a 95       	dec	r24
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <set_pin_datadirection+0xb6>
 2c8:	cb 01       	movw	r24, r22
 2ca:	84 2b       	or	r24, r20
 2cc:	8a b9       	out	0x0a, r24	; 10
 2ce:	08 95       	ret
			};
			if(pin_state == 0){
 2d0:	61 11       	cpse	r22, r1
 2d2:	18 c0       	rjmp	.+48     	; 0x304 <set_pin_datadirection+0xfa>
				// if PORTB and bit on 1 are the same we need to change it to 0 else its already 0
				if( (DDRD | (1 << pin_number)) == DDRD){
 2d4:	4a b1       	in	r20, 0x0a	; 10
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	b9 01       	movw	r22, r18
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <set_pin_datadirection+0xd8>
 2de:	66 0f       	add	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	8a 95       	dec	r24
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <set_pin_datadirection+0xd4>
 2e6:	cb 01       	movw	r24, r22
 2e8:	2a b1       	in	r18, 0x0a	; 10
 2ea:	64 2b       	or	r22, r20
 2ec:	ab 01       	movw	r20, r22
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	42 17       	cp	r20, r18
 2f2:	53 07       	cpc	r21, r19
 2f4:	39 f4       	brne	.+14     	; 0x304 <set_pin_datadirection+0xfa>
					DDRD ^= 1 << pin_number;
 2f6:	9a b1       	in	r25, 0x0a	; 10
 2f8:	89 27       	eor	r24, r25
 2fa:	8a b9       	out	0x0a, r24	; 10
 2fc:	08 95       	ret
				}
			}
			break;
			default:
			PORTB = PORTC = PORTD = 0;
 2fe:	1b b8       	out	0x0b, r1	; 11
 300:	18 b8       	out	0x08, r1	; 8
 302:	15 b8       	out	0x05, r1	; 5
 304:	08 95       	ret

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
