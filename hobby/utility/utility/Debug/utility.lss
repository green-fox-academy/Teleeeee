
utility.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0f  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fa  00000000  00000000  00000d93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000450  00000000  00000000  0000158d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000019e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000441  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000652  00000000  00000000  00001e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000024eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 42 00 	call	0x84	; 0x84 <main>
  7c:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <main>:
#include "utility.h"


int main(void)
{
	start_timer(TIMER_0, 64);
  84:	60 e4       	ldi	r22, 0x40	; 64
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	0e 94 50 00 	call	0xa0	; 0xa0 <start_timer>
	stop_timer(TIMER_0);
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	0e 94 d6 00 	call	0x1ac	; 0x1ac <stop_timer>
	start_timer(TIMER_1, 256);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	71 e0       	ldi	r23, 0x01	; 1
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	0e 94 50 00 	call	0xa0	; 0xa0 <start_timer>
  9e:	ff cf       	rjmp	.-2      	; 0x9e <main+0x1a>

000000a0 <start_timer>:
		break;	
	}		
};

void start_timer(enum TIMER_TO_WORK timer, uint16_t prescale){
	switch (timer)
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	51 f1       	breq	.+84     	; 0xf8 <start_timer+0x58>
  a4:	20 f0       	brcs	.+8      	; 0xae <start_timer+0xe>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	09 f4       	brne	.+2      	; 0xac <start_timer+0xc>
  aa:	53 c0       	rjmp	.+166    	; 0x152 <start_timer+0xb2>
  ac:	08 95       	ret
	{
	case 0 : 
		switch (prescale)
  ae:	60 34       	cpi	r22, 0x40	; 64
  b0:	71 05       	cpc	r23, r1
  b2:	c1 f0       	breq	.+48     	; 0xe4 <start_timer+0x44>
  b4:	38 f4       	brcc	.+14     	; 0xc4 <start_timer+0x24>
  b6:	61 30       	cpi	r22, 0x01	; 1
  b8:	71 05       	cpc	r23, r1
  ba:	61 f0       	breq	.+24     	; 0xd4 <start_timer+0x34>
  bc:	68 30       	cpi	r22, 0x08	; 8
  be:	71 05       	cpc	r23, r1
  c0:	69 f0       	breq	.+26     	; 0xdc <start_timer+0x3c>
  c2:	08 95       	ret
  c4:	61 15       	cp	r22, r1
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	78 07       	cpc	r23, r24
  ca:	79 f0       	breq	.+30     	; 0xea <start_timer+0x4a>
  cc:	61 15       	cp	r22, r1
  ce:	74 40       	sbci	r23, 0x04	; 4
  d0:	81 f0       	breq	.+32     	; 0xf2 <start_timer+0x52>
  d2:	08 95       	ret
		{
			case 1    : TCCR0B |= 1 << 0;
  d4:	85 b5       	in	r24, 0x25	; 37
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	85 bd       	out	0x25, r24	; 37
			break;
  da:	08 95       	ret
			case 8    : TCCR0B |= 1 << 1;
  dc:	85 b5       	in	r24, 0x25	; 37
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	85 bd       	out	0x25, r24	; 37
			break;
  e2:	08 95       	ret
			case 64   : TCCR0B = (1 << 0) | (1 << 1);
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	85 bd       	out	0x25, r24	; 37
			break;
  e8:	08 95       	ret
			case 256  : TCCR0B |= 1 << 2;
  ea:	85 b5       	in	r24, 0x25	; 37
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	85 bd       	out	0x25, r24	; 37
			break;
  f0:	08 95       	ret
			case 1024 : TCCR0B = (1 << 0) | (1 << 2);
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	85 bd       	out	0x25, r24	; 37
			break;
  f6:	08 95       	ret
		}
		break;
	case 1 : 
		switch (prescale)
  f8:	60 34       	cpi	r22, 0x40	; 64
  fa:	71 05       	cpc	r23, r1
  fc:	e1 f0       	breq	.+56     	; 0x136 <start_timer+0x96>
  fe:	38 f4       	brcc	.+14     	; 0x10e <start_timer+0x6e>
 100:	61 30       	cpi	r22, 0x01	; 1
 102:	71 05       	cpc	r23, r1
 104:	61 f0       	breq	.+24     	; 0x11e <start_timer+0x7e>
 106:	68 30       	cpi	r22, 0x08	; 8
 108:	71 05       	cpc	r23, r1
 10a:	79 f0       	breq	.+30     	; 0x12a <start_timer+0x8a>
 10c:	08 95       	ret
 10e:	61 15       	cp	r22, r1
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	78 07       	cpc	r23, r24
 114:	a1 f0       	breq	.+40     	; 0x13e <start_timer+0x9e>
 116:	61 15       	cp	r22, r1
 118:	74 40       	sbci	r23, 0x04	; 4
 11a:	b9 f0       	breq	.+46     	; 0x14a <start_timer+0xaa>
 11c:	08 95       	ret
		{
			case 1    : TCCR1B |= 1 << 0;
 11e:	e1 e8       	ldi	r30, 0x81	; 129
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	81 60       	ori	r24, 0x01	; 1
 126:	80 83       	st	Z, r24
			break;
 128:	08 95       	ret
			case 8    : TCCR1B |= 1 << 1;
 12a:	e1 e8       	ldi	r30, 0x81	; 129
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	82 60       	ori	r24, 0x02	; 2
 132:	80 83       	st	Z, r24
			break;
 134:	08 95       	ret
			case 64   : TCCR1B = (1 << 0) | (1 << 1);
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
			break;
 13c:	08 95       	ret
			case 256  : TCCR1B |= 1 << 2;
 13e:	e1 e8       	ldi	r30, 0x81	; 129
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	84 60       	ori	r24, 0x04	; 4
 146:	80 83       	st	Z, r24
			break;
 148:	08 95       	ret
			case 1024 : TCCR1B = (1 << 0) | (1 << 2);
 14a:	85 e0       	ldi	r24, 0x05	; 5
 14c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
			break;
 150:	08 95       	ret
		}
		break;
	case 2 : 
		switch (prescale)
 152:	60 34       	cpi	r22, 0x40	; 64
 154:	71 05       	cpc	r23, r1
 156:	e1 f0       	breq	.+56     	; 0x190 <start_timer+0xf0>
 158:	38 f4       	brcc	.+14     	; 0x168 <start_timer+0xc8>
 15a:	61 30       	cpi	r22, 0x01	; 1
 15c:	71 05       	cpc	r23, r1
 15e:	61 f0       	breq	.+24     	; 0x178 <start_timer+0xd8>
 160:	68 30       	cpi	r22, 0x08	; 8
 162:	71 05       	cpc	r23, r1
 164:	79 f0       	breq	.+30     	; 0x184 <start_timer+0xe4>
 166:	08 95       	ret
 168:	61 15       	cp	r22, r1
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	78 07       	cpc	r23, r24
 16e:	a1 f0       	breq	.+40     	; 0x198 <start_timer+0xf8>
 170:	61 15       	cp	r22, r1
 172:	74 40       	sbci	r23, 0x04	; 4
 174:	b9 f0       	breq	.+46     	; 0x1a4 <start_timer+0x104>
 176:	08 95       	ret
		{
			case 1    : TCCR2B |= 1 << 0;
 178:	e1 eb       	ldi	r30, 0xB1	; 177
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	80 83       	st	Z, r24
			break;
 182:	08 95       	ret
			case 8    : TCCR2B |= 1 << 1;
 184:	e1 eb       	ldi	r30, 0xB1	; 177
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	82 60       	ori	r24, 0x02	; 2
 18c:	80 83       	st	Z, r24
			break;
 18e:	08 95       	ret
			case 64   : TCCR2B = (1 << 0) | (1 << 1);
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
			break;
 196:	08 95       	ret
			case 256  : TCCR2B |= 1 << 2;
 198:	e1 eb       	ldi	r30, 0xB1	; 177
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	84 60       	ori	r24, 0x04	; 4
 1a0:	80 83       	st	Z, r24
			break;
 1a2:	08 95       	ret
			case 1024 : TCCR2B = (1 << 0) | (1 << 2);
 1a4:	85 e0       	ldi	r24, 0x05	; 5
 1a6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 1aa:	08 95       	ret

000001ac <stop_timer>:
		break;		
	}
};

void stop_timer(enum TIMER_TO_WORK timer) {
	switch (timer)
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	f9 f0       	breq	.+62     	; 0x1ee <stop_timer+0x42>
 1b0:	18 f0       	brcs	.+6      	; 0x1b8 <stop_timer+0xc>
 1b2:	82 30       	cpi	r24, 0x02	; 2
 1b4:	c9 f1       	breq	.+114    	; 0x228 <stop_timer+0x7c>
 1b6:	08 95       	ret
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
		case 0: 
			for (uint8_t i = 0; i < 3; i++)
			{
				// checks all 3 bits for timer if they are not 0 changes it to 0
				//which stops timer
				if( (TCCR0B | (1 << i)) == TCCR0B){
 1bc:	e1 e0       	ldi	r30, 0x01	; 1
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	35 b5       	in	r19, 0x25	; 37
 1c2:	af 01       	movw	r20, r30
 1c4:	08 2e       	mov	r0, r24
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <stop_timer+0x20>
 1c8:	44 0f       	add	r20, r20
 1ca:	55 1f       	adc	r21, r21
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <stop_timer+0x1c>
 1d0:	25 b5       	in	r18, 0x25	; 37
 1d2:	ba 01       	movw	r22, r20
 1d4:	63 2b       	or	r22, r19
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	62 17       	cp	r22, r18
 1da:	73 07       	cpc	r23, r19
 1dc:	19 f4       	brne	.+6      	; 0x1e4 <stop_timer+0x38>
					TCCR0B ^= 1 << i;
 1de:	25 b5       	in	r18, 0x25	; 37
 1e0:	42 27       	eor	r20, r18
 1e2:	45 bd       	out	0x25, r20	; 37
 1e4:	01 96       	adiw	r24, 0x01	; 1

void stop_timer(enum TIMER_TO_WORK timer) {
	switch (timer)
	{
		case 0: 
			for (uint8_t i = 0; i < 3; i++)
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	91 05       	cpc	r25, r1
 1ea:	51 f7       	brne	.-44     	; 0x1c0 <stop_timer+0x14>
 1ec:	08 95       	ret
		break;		
	}
};

void stop_timer(enum TIMER_TO_WORK timer) {
	switch (timer)
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
		case 1:
			for (uint8_t i = 0; i < 3; i++)
			{
				// checks all 3 bits for timer if they are not 0 changes it to 0
				//which stops timer
				if( (TCCR1B | (1 << i)) == TCCR1B){
 1f2:	e1 e8       	ldi	r30, 0x81	; 129
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	a1 e0       	ldi	r26, 0x01	; 1
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	30 81       	ld	r19, Z
 1fc:	ad 01       	movw	r20, r26
 1fe:	08 2e       	mov	r0, r24
 200:	02 c0       	rjmp	.+4      	; 0x206 <stop_timer+0x5a>
 202:	44 0f       	add	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <stop_timer+0x56>
 20a:	20 81       	ld	r18, Z
 20c:	ba 01       	movw	r22, r20
 20e:	63 2b       	or	r22, r19
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	62 17       	cp	r22, r18
 214:	73 07       	cpc	r23, r19
 216:	19 f4       	brne	.+6      	; 0x21e <stop_timer+0x72>
					TCCR1B ^= 1 << i;
 218:	20 81       	ld	r18, Z
 21a:	42 27       	eor	r20, r18
 21c:	40 83       	st	Z, r20
 21e:	01 96       	adiw	r24, 0x01	; 1
					TCCR0B ^= 1 << i;
				}
			}
			break;
		case 1:
			for (uint8_t i = 0; i < 3; i++)
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	91 05       	cpc	r25, r1
 224:	51 f7       	brne	.-44     	; 0x1fa <stop_timer+0x4e>
 226:	08 95       	ret
		break;		
	}
};

void stop_timer(enum TIMER_TO_WORK timer) {
	switch (timer)
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
		case 2:
			for (uint8_t i = 0; i < 3; i++)
			{
				// checks all 3 bits for timer if they are not 0 changes it to 0
				//which stops timer
				if( (TCCR2B | (1 << i)) == TCCR2B){
 22c:	e1 eb       	ldi	r30, 0xB1	; 177
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	a1 e0       	ldi	r26, 0x01	; 1
 232:	b0 e0       	ldi	r27, 0x00	; 0
 234:	30 81       	ld	r19, Z
 236:	ad 01       	movw	r20, r26
 238:	08 2e       	mov	r0, r24
 23a:	02 c0       	rjmp	.+4      	; 0x240 <stop_timer+0x94>
 23c:	44 0f       	add	r20, r20
 23e:	55 1f       	adc	r21, r21
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <stop_timer+0x90>
 244:	20 81       	ld	r18, Z
 246:	ba 01       	movw	r22, r20
 248:	63 2b       	or	r22, r19
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	62 17       	cp	r22, r18
 24e:	73 07       	cpc	r23, r19
 250:	19 f4       	brne	.+6      	; 0x258 <stop_timer+0xac>
					TCCR2B ^= 1 << i;
 252:	20 81       	ld	r18, Z
 254:	42 27       	eor	r20, r18
 256:	40 83       	st	Z, r20
 258:	01 96       	adiw	r24, 0x01	; 1
					TCCR1B ^= 1 << i;
				}
			}
			break;
		case 2:
			for (uint8_t i = 0; i < 3; i++)
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	91 05       	cpc	r25, r1
 25e:	51 f7       	brne	.-44     	; 0x234 <stop_timer+0x88>
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
