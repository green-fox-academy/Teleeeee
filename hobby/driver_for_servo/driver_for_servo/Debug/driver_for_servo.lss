
driver_for_servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000033e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c66  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000834  00000000  00000000  00001046  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ff  00000000  00000000  0000187a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ed  00000000  00000000  000020e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000021d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	97 00       	.word	0x0097	; ????
  6e:	a8 00       	.word	0x00a8	; ????
  70:	b9 00       	.word	0x00b9	; ????
  72:	ca 00       	.word	0x00ca	; ????
  74:	db 00       	.word	0x00db	; ????
  76:	ec 00       	.word	0x00ec	; ????
  78:	fd 00       	.word	0x00fd	; ????
  7a:	0e 01       	movw	r0, r28

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d4 e0       	ldi	r29, 0x04	; 4
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a1 30       	cpi	r26, 0x01	; 1
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  9c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <digitalWrite>:
	LOW,
	HIGH,
};

void digitalWrite(uint8_t pin_number, enum STATE pin_state){
	if(pin_state == 1){
  a4:	61 30       	cpi	r22, 0x01	; 1
  a6:	69 f4       	brne	.+26     	; 0xc2 <digitalWrite+0x1e>
		PORTB |= 1 << pin_number;
  a8:	45 b1       	in	r20, 0x05	; 5
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	b9 01       	movw	r22, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <digitalWrite+0x12>
  b2:	66 0f       	add	r22, r22
  b4:	77 1f       	adc	r23, r23
  b6:	8a 95       	dec	r24
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <digitalWrite+0xe>
  ba:	cb 01       	movw	r24, r22
  bc:	84 2b       	or	r24, r20
  be:	85 b9       	out	0x05, r24	; 5
  c0:	08 95       	ret
	};
	if(pin_state == 0){
  c2:	61 11       	cpse	r22, r1
  c4:	14 c0       	rjmp	.+40     	; 0xee <digitalWrite+0x4a>
		// if PORTB and bit on 1 are the same we need to change it to 0 else its already 0
		if( (PORTB | (1 << pin_number)) == PORTB){
  c6:	45 b1       	in	r20, 0x05	; 5
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <digitalWrite+0x30>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <digitalWrite+0x2c>
  d8:	cb 01       	movw	r24, r22
  da:	25 b1       	in	r18, 0x05	; 5
  dc:	64 2b       	or	r22, r20
  de:	ab 01       	movw	r20, r22
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	42 17       	cp	r20, r18
  e4:	53 07       	cpc	r21, r19
  e6:	19 f4       	brne	.+6      	; 0xee <digitalWrite+0x4a>
			PORTB ^= 1 << pin_number;
  e8:	95 b1       	in	r25, 0x05	; 5
  ea:	89 27       	eor	r24, r25
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	08 95       	ret

000000f0 <setup>:
		}
	}
}
void setup(){
	DDRB = 0b00001111;
  f0:	8f e0       	ldi	r24, 0x0F	; 15
  f2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
  f4:	15 b8       	out	0x05, r1	; 5
  f6:	08 95       	ret

000000f8 <main>:


int main(void)
{
	uint8_t dir = 1;
	setup();
  f8:	0e 94 78 00 	call	0xf0	; 0xf0 <setup>
int8_t _step = 0;


int main(void)
{
	uint8_t dir = 1;
  fc:	01 e0       	ldi	r16, 0x01	; 1
	setup();
    while (1) 
    {
		dir ^= 1;
  fe:	11 e0       	ldi	r17, 0x01	; 1
			}
			if(_step > 7){
				_step = 0;
			}
			if(_step < 0){
				_step = 7;
 100:	0f 2e       	mov	r0, r31
 102:	f7 e0       	ldi	r31, 0x07	; 7
 104:	ff 2e       	mov	r15, r31
 106:	f0 2d       	mov	r31, r0
{
	uint8_t dir = 1;
	setup();
    while (1) 
    {
		dir ^= 1;
 108:	01 27       	eor	r16, r17
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	d0 e0       	ldi	r29, 0x00	; 0
		for(uint32_t round = 0; round < 64 * 64 ; round++){
			switch(_step){
 10e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 112:	8e 2f       	mov	r24, r30
 114:	ee 0f       	add	r30, r30
 116:	99 0b       	sbc	r25, r25
 118:	aa 0b       	sbc	r26, r26
 11a:	bb 0b       	sbc	r27, r27
 11c:	88 30       	cpi	r24, 0x08	; 8
 11e:	91 05       	cpc	r25, r1
 120:	08 f0       	brcs	.+2      	; 0x124 <main+0x2c>
 122:	8d c0       	rjmp	.+282    	; 0x23e <main+0x146>
 124:	fc 01       	movw	r30, r24
 126:	ea 5c       	subi	r30, 0xCA	; 202
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__tablejump2__>
				case 0:
				digitalWrite(PIN0, LOW);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN1, LOW);
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	81 2f       	mov	r24, r17
 13a:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN2, LOW);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN3, HIGH);
 146:	61 2f       	mov	r22, r17
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				break;		  
 14e:	87 c0       	rjmp	.+270    	; 0x25e <main+0x166>
				case 1:		  
				digitalWrite(PIN0, LOW);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN1, LOW);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	81 2f       	mov	r24, r17
 15c:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN2, HIGH);
 160:	61 2f       	mov	r22, r17
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN3, HIGH);
 168:	61 2f       	mov	r22, r17
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				break;		  
 170:	76 c0       	rjmp	.+236    	; 0x25e <main+0x166>
				case 2:		  
				digitalWrite(PIN0, LOW);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN1, LOW);
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	81 2f       	mov	r24, r17
 17e:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN2, HIGH);
 182:	61 2f       	mov	r22, r17
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN3, LOW);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				break;		  
 192:	65 c0       	rjmp	.+202    	; 0x25e <main+0x166>
				case 3:		  
				digitalWrite(PIN0, LOW);
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN1, HIGH);
 19c:	61 2f       	mov	r22, r17
 19e:	81 2f       	mov	r24, r17
 1a0:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN2, HIGH);
 1a4:	61 2f       	mov	r22, r17
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN3, LOW);
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				break;		  
 1b4:	54 c0       	rjmp	.+168    	; 0x25e <main+0x166>
				case 4:		  
				digitalWrite(PIN0, LOW);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN1, HIGH);
 1be:	61 2f       	mov	r22, r17
 1c0:	81 2f       	mov	r24, r17
 1c2:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN2, LOW);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN3, LOW);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				break;		  
 1d6:	43 c0       	rjmp	.+134    	; 0x25e <main+0x166>
				case 5:		  
				digitalWrite(PIN0, HIGH);
 1d8:	61 2f       	mov	r22, r17
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN1, HIGH);
 1e0:	61 2f       	mov	r22, r17
 1e2:	81 2f       	mov	r24, r17
 1e4:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN2, LOW);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN3, LOW);
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				break;		  
 1f8:	32 c0       	rjmp	.+100    	; 0x25e <main+0x166>
				case 6:		  
				digitalWrite(PIN0, HIGH);
 1fa:	61 2f       	mov	r22, r17
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN1, LOW);
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	81 2f       	mov	r24, r17
 206:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN2, LOW);
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN3, LOW);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				break;		  
 21a:	21 c0       	rjmp	.+66     	; 0x25e <main+0x166>
				case 7:		  
				digitalWrite(PIN0, HIGH);
 21c:	61 2f       	mov	r22, r17
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN1, LOW);
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	81 2f       	mov	r24, r17
 228:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN2, LOW);
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN3, HIGH);
 234:	61 2f       	mov	r22, r17
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				break;		  
 23c:	10 c0       	rjmp	.+32     	; 0x25e <main+0x166>
				default:	  
				digitalWrite(PIN0, LOW);
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN1, LOW);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	81 2f       	mov	r24, r17
 24a:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN2, LOW);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				digitalWrite(PIN3, LOW);
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	0e 94 52 00 	call	0xa4	; 0xa4 <digitalWrite>
				break;
			}
			if(dir == 0){
 25e:	01 11       	cpse	r16, r1
 260:	06 c0       	rjmp	.+12     	; 0x26e <main+0x176>
			    _step++;
 262:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 266:	8f 5f       	subi	r24, 0xFF	; 255
 268:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 26c:	05 c0       	rjmp	.+10     	; 0x278 <main+0x180>
			}else{
			    _step--;
 26e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 272:	81 50       	subi	r24, 0x01	; 1
 274:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			if(_step > 7){
 278:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 27c:	88 30       	cpi	r24, 0x08	; 8
 27e:	1c f0       	brlt	.+6      	; 0x286 <main+0x18e>
				_step = 0;
 280:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 284:	04 c0       	rjmp	.+8      	; 0x28e <main+0x196>
			}
			if(_step < 0){
 286:	88 23       	and	r24, r24
 288:	14 f4       	brge	.+4      	; 0x28e <main+0x196>
				_step = 7;
 28a:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <_edata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	8f e9       	ldi	r24, 0x9F	; 159
 290:	9f e0       	ldi	r25, 0x0F	; 15
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <main+0x19a>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0x1a0>
 298:	00 00       	nop
 29a:	21 96       	adiw	r28, 0x01	; 1
	uint8_t dir = 1;
	setup();
    while (1) 
    {
		dir ^= 1;
		for(uint32_t round = 0; round < 64 * 64 ; round++){
 29c:	c1 15       	cp	r28, r1
 29e:	90 e1       	ldi	r25, 0x10	; 16
 2a0:	d9 07       	cpc	r29, r25
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <main+0x1ae>
 2a4:	34 cf       	rjmp	.-408    	; 0x10e <main+0x16>
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	83 ed       	ldi	r24, 0xD3	; 211
 2aa:	90 e3       	ldi	r25, 0x30	; 48
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <main+0x1b4>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0x1be>
 2b6:	00 00       	nop
 2b8:	27 cf       	rjmp	.-434    	; 0x108 <main+0x10>

000002ba <__tablejump2__>:
 2ba:	ee 0f       	add	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	05 90       	lpm	r0, Z+
 2c0:	f4 91       	lpm	r31, Z
 2c2:	e0 2d       	mov	r30, r0
 2c4:	09 94       	ijmp

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
