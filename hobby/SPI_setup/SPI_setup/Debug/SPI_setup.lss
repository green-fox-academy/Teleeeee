
SPI_setup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e0  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c6  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032b  00000000  00000000  000012a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ce  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  00001a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 42 00 	call	0x84	; 0x84 <main>
  7c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <main>:
#include <avr/io.h>
#include "SPI_setup.h"

int main(void)
{	
	setup_SPI();
  84:	0e 94 50 00 	call	0xa0	; 0xa0 <setup_SPI>
	start_SPI();
  88:	0e 94 5d 00 	call	0xba	; 0xba <start_SPI>
	send_byte_SPI(0b11111110);
  8c:	8e ef       	ldi	r24, 0xFE	; 254
  8e:	0e 94 63 00 	call	0xc6	; 0xc6 <send_byte_SPI>
	send_byte_SPI(0);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 63 00 	call	0xc6	; 0xc6 <send_byte_SPI>
	end_SPI();
  98:	0e 94 56 00 	call	0xac	; 0xac <end_SPI>
	PORTB |= 1 <<2;
  9c:	2a 9a       	sbi	0x05, 2	; 5
  9e:	ff cf       	rjmp	.-2      	; 0x9e <main+0x1a>

000000a0 <setup_SPI>:


void setup_SPI(){
	
	//set MISO output and SCK output 
	DDRB |= 1 << 2;
  a0:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= 1 << 3;
  a2:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= 1 << 5;
  a4:	25 9a       	sbi	0x04, 5	; 4
	//enable SPI
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
  a6:	81 e5       	ldi	r24, 0x51	; 81
  a8:	8c bd       	out	0x2c, r24	; 44
  aa:	08 95       	ret

000000ac <end_SPI>:
	//set clock
	//SPCR |= 1 << SPR0;
}

void end_SPI(){
	if(PORTB & 1 << 2){
  ac:	2a 9b       	sbis	0x05, 2	; 5
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <end_SPI+0xc>
		PORTB ^= 1 << 2;
  b0:	95 b1       	in	r25, 0x05	; 5
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	89 27       	eor	r24, r25
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	08 95       	ret

000000ba <start_SPI>:
	}
}

void start_SPI(){
	PORTB |= 1 << 2;
  ba:	2a 9a       	sbi	0x05, 2	; 5

	//select master SPI mode
	SPCR |= 1 << MSTR;
  bc:	8c b5       	in	r24, 0x2c	; 44
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	8c bd       	out	0x2c, r24	; 44
	uint8_t data = SPDR;
  c2:	8e b5       	in	r24, 0x2e	; 46
  c4:	08 95       	ret

000000c6 <send_byte_SPI>:
	
}

void send_byte_SPI(uint8_t data){
  c6:	cf 93       	push	r28
  c8:	c8 2f       	mov	r28, r24
	start_SPI();
  ca:	0e 94 5d 00 	call	0xba	; 0xba <start_SPI>
	//transfer data to shift register
	SPDR = data;
  ce:	ce bd       	out	0x2e, r28	; 46
	//wait for send finish flagb
	while(!(SPSR & (1 << SPIF)));
  d0:	0d b4       	in	r0, 0x2d	; 45
  d2:	07 fe       	sbrs	r0, 7
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <send_byte_SPI+0xa>
	data = SPDR;
  d6:	8e b5       	in	r24, 0x2e	; 46
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
