
SPI_setup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000786  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f5  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  0000100f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000014  00000000  00000000  000015f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000160a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 42 00 	call	0x84	; 0x84 <main>
  7c:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <main>:
#include "SPI_setup.h"

int main(void)
{
	uint8_t i = 0;
	DDRC = DDRD = 0xFF;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	8a b9       	out	0x0a, r24	; 10
  88:	87 b9       	out	0x07, r24	; 7
	DDRB |= 1 << 1; 
  8a:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= 1 << 2;
  8c:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= 1 << 3;
  8e:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= 1 << 5;
  90:	25 9a       	sbi	0x04, 5	; 4
	//enable SPI
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << DORD);
  92:	81 e7       	ldi	r24, 0x71	; 113
  94:	8c bd       	out	0x2c, r24	; 44
	
	i = SPDR;
  96:	8e b5       	in	r24, 0x2e	; 46
	while((SPSR &(1 << SPIF) == 0));
  98:	8d b5       	in	r24, 0x2d	; 45
	i = SPDR;
  9a:	8e b5       	in	r24, 0x2e	; 46
    while (1) 
    {
		SPDR = 0b00000000;
		while((SPSR &(1 << SPIF) == 0));
		i = SPDR;
		SPDR = 0b00001100;
  9c:	8c e0       	ldi	r24, 0x0C	; 12
	while((SPSR &(1 << SPIF) == 0));
	i = SPDR;
	
    while (1) 
    {
		SPDR = 0b00000000;
  9e:	1e bc       	out	0x2e, r1	; 46
		while((SPSR &(1 << SPIF) == 0));
  a0:	9d b5       	in	r25, 0x2d	; 45
		i = SPDR;
  a2:	9e b5       	in	r25, 0x2e	; 46
		SPDR = 0b00001100;
  a4:	8e bd       	out	0x2e, r24	; 46
		while((SPSR &(1 << SPIF) == 0));
  a6:	9d b5       	in	r25, 0x2d	; 45
		i = SPDR;
  a8:	9e b5       	in	r25, 0x2e	; 46
  aa:	f9 cf       	rjmp	.-14     	; 0x9e <main+0x1a>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
