
UART_circular_buffer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000370  00000404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000370  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080010c  0080010c  00000410  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f43  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a46  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f5  00000000  00000000  00001eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  000025a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f7  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000682  00000000  00000000  00002d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000033d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_18>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e0 e7       	ldi	r30, 0x70	; 112
  80:	f3 e0       	ldi	r31, 0x03	; 3
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ac 30       	cpi	r26, 0x0C	; 12
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	ac e0       	ldi	r26, 0x0C	; 12
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a1 33       	cpi	r26, 0x31	; 49
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  a2:	0c 94 b6 01 	jmp	0x36c	; 0x36c <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <circular_buf_put_ow>:
    }else {
        cbuf->first_array[cbuf->current_index + 1] = data;
        cbuf->current_index++;
        return 0;
    }
}
  aa:	fc 01       	movw	r30, r24
  ac:	80 81       	ld	r24, Z
  ae:	28 2f       	mov	r18, r24
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	2f 5f       	subi	r18, 0xFF	; 255
  b4:	3f 4f       	sbci	r19, 0xFF	; 255
  b6:	42 81       	ldd	r20, Z+2	; 0x02
  b8:	53 81       	ldd	r21, Z+3	; 0x03
  ba:	24 17       	cp	r18, r20
  bc:	35 07       	cpc	r19, r21
  be:	18 f0       	brcs	.+6      	; 0xc6 <circular_buf_put_ow+0x1c>
  c0:	64 83       	std	Z+4, r22	; 0x04
  c2:	10 82       	st	Z, r1
  c4:	08 95       	ret
  c6:	df 01       	movw	r26, r30
  c8:	a2 0f       	add	r26, r18
  ca:	b3 1f       	adc	r27, r19
  cc:	14 96       	adiw	r26, 0x04	; 4
  ce:	6c 93       	st	X, r22
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <circular_buf_get>:

/// Retrieve a value from the buffer
/// Returns 0 on success, -1 if the buffer is empty
uint8_t circular_buf_get(cbuf_handle_t* cbuf){
  d6:	fc 01       	movw	r30, r24
	if(cbuf->current_read + 1 > cbuf->size){
  d8:	91 81       	ldd	r25, Z+1	; 0x01
  da:	42 81       	ldd	r20, Z+2	; 0x02
  dc:	53 81       	ldd	r21, Z+3	; 0x03
  de:	29 2f       	mov	r18, r25
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	2f 5f       	subi	r18, 0xFF	; 255
  e4:	3f 4f       	sbci	r19, 0xFF	; 255
  e6:	42 17       	cp	r20, r18
  e8:	53 07       	cpc	r21, r19
  ea:	28 f4       	brcc	.+10     	; 0xf6 <circular_buf_get+0x20>
	cbuf->current_read = 0;
  ec:	11 82       	std	Z+1, r1	; 0x01
	return cbuf->first_array[cbuf->size];
  ee:	e4 0f       	add	r30, r20
  f0:	f5 1f       	adc	r31, r21
  f2:	84 81       	ldd	r24, Z+4	; 0x04
  f4:	08 95       	ret
	}
	cbuf->current_read += 1;
  f6:	9f 5f       	subi	r25, 0xFF	; 255
  f8:	91 83       	std	Z+1, r25	; 0x01
	return cbuf->first_array[cbuf->current_read - 1];
  fa:	e9 0f       	add	r30, r25
  fc:	f1 1d       	adc	r31, r1
  fe:	83 81       	ldd	r24, Z+3	; 0x03
}
 100:	08 95       	ret

00000102 <UART_GetCharacter>:
#define RX_CIRC_BUFF_LEN 25

struct circular_buffer my_circ_buffer;

char UART_GetCharacter() {
	return circular_buf_get(&my_circ_buffer);
 102:	8c e0       	ldi	r24, 0x0C	; 12
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 6b 00 	call	0xd6	; 0xd6 <circular_buf_get>
}
 10a:	08 95       	ret

0000010c <UART_SendCharacter>:
	my_circ_buffer.current_index = 0;
	my_circ_buffer.current_read = 0;
}

void UART_SendCharacter(char character) {
	while( !(UCSR0A & (1 << UDRE0))){
 10c:	e0 ec       	ldi	r30, 0xC0	; 192
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	85 ff       	sbrs	r24, 5
 114:	fd cf       	rjmp	.-6      	; 0x110 <UART_SendCharacter+0x4>
		;
	}
	UDR0 = circular_buf_get(&my_circ_buffer);
 116:	8c e0       	ldi	r24, 0x0C	; 12
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 6b 00 	call	0xd6	; 0xd6 <circular_buf_get>
 11e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 122:	08 95       	ret

00000124 <__vector_18>:

char UART_GetCharacter() {
	return circular_buf_get(&my_circ_buffer);
}

ISR(USART_RX_vect) {
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	circular_buf_put_ow(&my_circ_buffer, UDR0);
 146:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 14a:	8c e0       	ldi	r24, 0x0C	; 12
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 55 00 	call	0xaa	; 0xaa <circular_buf_put_ow>
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <UART_Init>:

void UART_Init() {

	UBRR0  = 103;
 174:	87 e6       	ldi	r24, 0x67	; 103
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 17c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = 0b10011000;
 180:	88 e9       	ldi	r24, 0x98	; 152
 182:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	sei();
 186:	78 94       	sei
	
	my_circ_buffer.size = RX_CIRC_BUFF_LEN;
 188:	ec e0       	ldi	r30, 0x0C	; 12
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	89 e1       	ldi	r24, 0x19	; 25
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	93 83       	std	Z+3, r25	; 0x03
 192:	82 83       	std	Z+2, r24	; 0x02
	my_circ_buffer.capacity = 26;
 194:	8a e1       	ldi	r24, 0x1A	; 26
 196:	86 8f       	std	Z+30, r24	; 0x1e
	my_circ_buffer.current_index = 0;
 198:	10 82       	st	Z, r1
	my_circ_buffer.current_read = 0;
 19a:	11 82       	std	Z+1, r1	; 0x01
 19c:	08 95       	ret

0000019e <main>:
	UDR0 = circular_buf_get(&my_circ_buffer);
}



int main(void) {
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	cb 51       	subi	r28, 0x1B	; 27
 1a8:	d1 40       	sbci	r29, 0x01	; 1
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
	char buffer[255];
	
	//Don't forget to call the init function :)
	UART_Init();
 1b4:	0e 94 ba 00 	call	0x174	; 0x174 <UART_Init>

	// Setting up STDIO input and output buffer
	// You don't have to understand this!
	//----- START OF STDIO IO BUFFER SETUP
	FILE UART_output = FDEV_SETUP_STREAM(UART_SendCharacter, NULL, _FDEV_SETUP_WRITE);
 1b8:	fe 01       	movw	r30, r28
 1ba:	f3 95       	inc	r31
 1bc:	8e e0       	ldi	r24, 0x0E	; 14
 1be:	df 01       	movw	r26, r30
 1c0:	28 2f       	mov	r18, r24
 1c2:	1d 92       	st	X+, r1
 1c4:	2a 95       	dec	r18
 1c6:	e9 f7       	brne	.-6      	; 0x1c2 <main+0x24>
 1c8:	92 e0       	ldi	r25, 0x02	; 2
 1ca:	93 83       	std	Z+3, r25	; 0x03
 1cc:	26 e8       	ldi	r18, 0x86	; 134
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	31 87       	std	Z+9, r19	; 0x09
 1d2:	20 87       	std	Z+8, r18	; 0x08
	stdout = &UART_output;
 1d4:	2b e2       	ldi	r18, 0x2B	; 43
 1d6:	31 e0       	ldi	r19, 0x01	; 1
 1d8:	d9 01       	movw	r26, r18
 1da:	13 96       	adiw	r26, 0x03	; 3
 1dc:	fc 93       	st	X, r31
 1de:	ee 93       	st	-X, r30
 1e0:	12 97       	sbiw	r26, 0x02	; 2
	FILE UART_input = FDEV_SETUP_STREAM(NULL, UART_GetCharacter, _FDEV_SETUP_READ);
 1e2:	3e 96       	adiw	r30, 0x0e	; 14
 1e4:	df 01       	movw	r26, r30
 1e6:	1d 92       	st	X+, r1
 1e8:	8a 95       	dec	r24
 1ea:	e9 f7       	brne	.-6      	; 0x1e6 <main+0x48>
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	83 83       	std	Z+3, r24	; 0x03
 1f0:	81 e8       	ldi	r24, 0x81	; 129
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	93 87       	std	Z+11, r25	; 0x0b
 1f6:	82 87       	std	Z+10, r24	; 0x0a
	stdin = &UART_input;
 1f8:	d9 01       	movw	r26, r18
 1fa:	ed 93       	st	X+, r30
 1fc:	fc 93       	st	X, r31
	//----- END OF STDIO IO BUFFER SETUP

	// Try printf
	printf("Startup...\r\n");
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 48 01 	call	0x290	; 0x290 <puts>

	// Loop that runs forever
	while (1) {
		// With gets and puts create a loopback, use the buffer variable!
		gets(buffer);
 206:	ce 01       	movw	r24, r28
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	0e 94 1e 01 	call	0x23c	; 0x23c <gets>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	bf ef       	ldi	r27, 0xFF	; 255
 210:	29 e6       	ldi	r18, 0x69	; 105
 212:	88 e1       	ldi	r24, 0x18	; 24
 214:	b1 50       	subi	r27, 0x01	; 1
 216:	20 40       	sbci	r18, 0x00	; 0
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0x76>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0x80>
 21e:	00 00       	nop
		_delay_ms(500);
		puts(buffer);
 220:	ce 01       	movw	r24, r28
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	0e 94 48 01 	call	0x290	; 0x290 <puts>
 228:	9f ef       	ldi	r25, 0xFF	; 255
 22a:	a9 e6       	ldi	r26, 0x69	; 105
 22c:	b8 e1       	ldi	r27, 0x18	; 24
 22e:	91 50       	subi	r25, 0x01	; 1
 230:	a0 40       	sbci	r26, 0x00	; 0
 232:	b0 40       	sbci	r27, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0x90>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x9a>
 238:	00 00       	nop
 23a:	e5 cf       	rjmp	.-54     	; 0x206 <main+0x68>

0000023c <gets>:
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <__iob>
 248:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <__iob+0x1>
 24c:	23 81       	ldd	r18, Z+3	; 0x03
 24e:	20 fd       	sbrc	r18, 0
 250:	03 c0       	rjmp	.+6      	; 0x258 <gets+0x1c>
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	17 c0       	rjmp	.+46     	; 0x286 <gets+0x4a>
 258:	c9 2f       	mov	r28, r25
 25a:	d8 2f       	mov	r29, r24
 25c:	08 2f       	mov	r16, r24
 25e:	19 2f       	mov	r17, r25
 260:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <__iob>
 264:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <__iob+0x1>
 268:	0e 94 78 01 	call	0x2f0	; 0x2f0 <fgetc>
 26c:	8f 3f       	cpi	r24, 0xFF	; 255
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	92 07       	cpc	r25, r18
 272:	79 f3       	breq	.-34     	; 0x252 <gets+0x16>
 274:	f8 01       	movw	r30, r16
 276:	81 93       	st	Z+, r24
 278:	8f 01       	movw	r16, r30
 27a:	0a 97       	sbiw	r24, 0x0a	; 10
 27c:	89 f7       	brne	.-30     	; 0x260 <gets+0x24>
 27e:	31 97       	sbiw	r30, 0x01	; 1
 280:	10 82       	st	Z, r1
 282:	8d 2f       	mov	r24, r29
 284:	9c 2f       	mov	r25, r28
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	08 95       	ret

00000290 <puts>:
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <__iob+0x2>
 29c:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <__iob+0x3>
 2a0:	23 81       	ldd	r18, Z+3	; 0x03
 2a2:	21 ff       	sbrs	r18, 1
 2a4:	1b c0       	rjmp	.+54     	; 0x2dc <puts+0x4c>
 2a6:	8c 01       	movw	r16, r24
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
 2aa:	c0 e0       	ldi	r28, 0x00	; 0
 2ac:	f8 01       	movw	r30, r16
 2ae:	81 91       	ld	r24, Z+
 2b0:	8f 01       	movw	r16, r30
 2b2:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <__iob+0x2>
 2b6:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <__iob+0x3>
 2ba:	db 01       	movw	r26, r22
 2bc:	18 96       	adiw	r26, 0x08	; 8
 2be:	ed 91       	ld	r30, X+
 2c0:	fc 91       	ld	r31, X
 2c2:	19 97       	sbiw	r26, 0x09	; 9
 2c4:	88 23       	and	r24, r24
 2c6:	31 f0       	breq	.+12     	; 0x2d4 <puts+0x44>
 2c8:	09 95       	icall
 2ca:	89 2b       	or	r24, r25
 2cc:	79 f3       	breq	.-34     	; 0x2ac <puts+0x1c>
 2ce:	df ef       	ldi	r29, 0xFF	; 255
 2d0:	cf ef       	ldi	r28, 0xFF	; 255
 2d2:	ec cf       	rjmp	.-40     	; 0x2ac <puts+0x1c>
 2d4:	8a e0       	ldi	r24, 0x0A	; 10
 2d6:	09 95       	icall
 2d8:	89 2b       	or	r24, r25
 2da:	19 f0       	breq	.+6      	; 0x2e2 <puts+0x52>
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	9f ef       	ldi	r25, 0xFF	; 255
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <puts+0x56>
 2e2:	8d 2f       	mov	r24, r29
 2e4:	9c 2f       	mov	r25, r28
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	08 95       	ret

000002f0 <fgetc>:
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	ec 01       	movw	r28, r24
 2f6:	2b 81       	ldd	r18, Y+3	; 0x03
 2f8:	20 ff       	sbrs	r18, 0
 2fa:	33 c0       	rjmp	.+102    	; 0x362 <fgetc+0x72>
 2fc:	26 ff       	sbrs	r18, 6
 2fe:	0a c0       	rjmp	.+20     	; 0x314 <fgetc+0x24>
 300:	2f 7b       	andi	r18, 0xBF	; 191
 302:	2b 83       	std	Y+3, r18	; 0x03
 304:	8e 81       	ldd	r24, Y+6	; 0x06
 306:	9f 81       	ldd	r25, Y+7	; 0x07
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	9f 83       	std	Y+7, r25	; 0x07
 30c:	8e 83       	std	Y+6, r24	; 0x06
 30e:	8a 81       	ldd	r24, Y+2	; 0x02
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	29 c0       	rjmp	.+82     	; 0x366 <fgetc+0x76>
 314:	22 ff       	sbrs	r18, 2
 316:	0f c0       	rjmp	.+30     	; 0x336 <fgetc+0x46>
 318:	e8 81       	ld	r30, Y
 31a:	f9 81       	ldd	r31, Y+1	; 0x01
 31c:	80 81       	ld	r24, Z
 31e:	08 2e       	mov	r0, r24
 320:	00 0c       	add	r0, r0
 322:	99 0b       	sbc	r25, r25
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	19 f4       	brne	.+6      	; 0x32e <fgetc+0x3e>
 328:	20 62       	ori	r18, 0x20	; 32
 32a:	2b 83       	std	Y+3, r18	; 0x03
 32c:	1a c0       	rjmp	.+52     	; 0x362 <fgetc+0x72>
 32e:	31 96       	adiw	r30, 0x01	; 1
 330:	f9 83       	std	Y+1, r31	; 0x01
 332:	e8 83       	st	Y, r30
 334:	0e c0       	rjmp	.+28     	; 0x352 <fgetc+0x62>
 336:	ea 85       	ldd	r30, Y+10	; 0x0a
 338:	fb 85       	ldd	r31, Y+11	; 0x0b
 33a:	09 95       	icall
 33c:	97 ff       	sbrs	r25, 7
 33e:	09 c0       	rjmp	.+18     	; 0x352 <fgetc+0x62>
 340:	2b 81       	ldd	r18, Y+3	; 0x03
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	11 f0       	breq	.+4      	; 0x34a <fgetc+0x5a>
 346:	80 e2       	ldi	r24, 0x20	; 32
 348:	01 c0       	rjmp	.+2      	; 0x34c <fgetc+0x5c>
 34a:	80 e1       	ldi	r24, 0x10	; 16
 34c:	82 2b       	or	r24, r18
 34e:	8b 83       	std	Y+3, r24	; 0x03
 350:	08 c0       	rjmp	.+16     	; 0x362 <fgetc+0x72>
 352:	2e 81       	ldd	r18, Y+6	; 0x06
 354:	3f 81       	ldd	r19, Y+7	; 0x07
 356:	2f 5f       	subi	r18, 0xFF	; 255
 358:	3f 4f       	sbci	r19, 0xFF	; 255
 35a:	3f 83       	std	Y+7, r19	; 0x07
 35c:	2e 83       	std	Y+6, r18	; 0x06
 35e:	99 27       	eor	r25, r25
 360:	02 c0       	rjmp	.+4      	; 0x366 <fgetc+0x76>
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	9f ef       	ldi	r25, 0xFF	; 255
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <_exit>:
 36c:	f8 94       	cli

0000036e <__stop_program>:
 36e:	ff cf       	rjmp	.-2      	; 0x36e <__stop_program>
