
UART_redirected_problem_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002ba  0000034e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010c  0080010c  0000035a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac2  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008de  00000000  00000000  00000ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000337  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c7  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000120  00000000  00000000  00002023  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002143  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	ea eb       	ldi	r30, 0xBA	; 186
  80:	f2 e0       	ldi	r31, 0x02	; 2
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ac 30       	cpi	r26, 0x0C	; 12
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	ac e0       	ldi	r26, 0x0C	; 12
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a2 31       	cpi	r26, 0x12	; 18
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  a2:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <UART_SendCharacter>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	e0 ec       	ldi	r30, 0xC0	; 192
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	95 ff       	sbrs	r25, 5
  b2:	fd cf       	rjmp	.-6      	; 0xae <UART_SendCharacter+0x4>
  b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  b8:	08 95       	ret

000000ba <UART_GetCharacter>:
  ba:	e0 ec       	ldi	r30, 0xC0	; 192
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 23       	and	r24, r24
  c2:	ec f7       	brge	.-6      	; 0xbe <UART_GetCharacter+0x4>
  c4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  c8:	08 95       	ret

000000ca <UART_Init>:
  ca:	87 e6       	ldi	r24, 0x67	; 103
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  d6:	e1 ec       	ldi	r30, 0xC1	; 193
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	88 60       	ori	r24, 0x08	; 8
  de:	80 83       	st	Z, r24
  e0:	80 81       	ld	r24, Z
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <main>:
void ProcessorDoesSomethingElse(){
	// This function simulates a time-consuming task
	_delay_ms(500);
}

int main(void) {
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
  f0:	cb 51       	subi	r28, 0x1B	; 27
  f2:	d1 40       	sbci	r29, 0x01	; 1
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	cd bf       	out	0x3d, r28	; 61
	char buffer[255];

	//Don't forget to call the init function :)
	UART_Init();
  fe:	0e 94 65 00 	call	0xca	; 0xca <UART_Init>

	// Setting up STDIO input and output buffer
	// You don't have to understand this!
	//----- START OF STDIO IO BUFFER SETUP
	FILE UART_output = FDEV_SETUP_STREAM(UART_SendCharacter, NULL, _FDEV_SETUP_WRITE);
 102:	fe 01       	movw	r30, r28
 104:	f3 95       	inc	r31
 106:	8e e0       	ldi	r24, 0x0E	; 14
 108:	df 01       	movw	r26, r30
 10a:	28 2f       	mov	r18, r24
 10c:	1d 92       	st	X+, r1
 10e:	2a 95       	dec	r18
 110:	e9 f7       	brne	.-6      	; 0x10c <main+0x24>
 112:	92 e0       	ldi	r25, 0x02	; 2
 114:	93 83       	std	Z+3, r25	; 0x03
 116:	25 e5       	ldi	r18, 0x55	; 85
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	31 87       	std	Z+9, r19	; 0x09
 11c:	20 87       	std	Z+8, r18	; 0x08
	stdout = &UART_output;
 11e:	2c e0       	ldi	r18, 0x0C	; 12
 120:	31 e0       	ldi	r19, 0x01	; 1
 122:	d9 01       	movw	r26, r18
 124:	13 96       	adiw	r26, 0x03	; 3
 126:	fc 93       	st	X, r31
 128:	ee 93       	st	-X, r30
 12a:	12 97       	sbiw	r26, 0x02	; 2
	FILE UART_input = FDEV_SETUP_STREAM(NULL, UART_GetCharacter, _FDEV_SETUP_READ);
 12c:	3e 96       	adiw	r30, 0x0e	; 14
 12e:	df 01       	movw	r26, r30
 130:	1d 92       	st	X+, r1
 132:	8a 95       	dec	r24
 134:	e9 f7       	brne	.-6      	; 0x130 <main+0x48>
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	83 83       	std	Z+3, r24	; 0x03
 13a:	8d e5       	ldi	r24, 0x5D	; 93
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	93 87       	std	Z+11, r25	; 0x0b
 140:	82 87       	std	Z+10, r24	; 0x0a
	stdin = &UART_input;
 142:	d9 01       	movw	r26, r18
 144:	ed 93       	st	X+, r30
 146:	fc 93       	st	X, r31
	//----- END OF STDIO IO BUFFER SETUP

	// Try printf
	printf("Startup...\r\n");
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 ed 00 	call	0x1da	; 0x1da <puts>

	// Loop that runs forever
	while (1) {
		// With gets and puts create a loopback, use the buffer variable!
		gets(buffer);
 150:	ce 01       	movw	r24, r28
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	0e 94 c3 00 	call	0x186	; 0x186 <gets>
 158:	bf ef       	ldi	r27, 0xFF	; 255
 15a:	29 e6       	ldi	r18, 0x69	; 105
 15c:	88 e1       	ldi	r24, 0x18	; 24
 15e:	b1 50       	subi	r27, 0x01	; 1
 160:	20 40       	sbci	r18, 0x00	; 0
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x76>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x80>
 168:	00 00       	nop
		ProcessorDoesSomethingElse();
		puts(buffer);
 16a:	ce 01       	movw	r24, r28
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	0e 94 ed 00 	call	0x1da	; 0x1da <puts>
 172:	9f ef       	ldi	r25, 0xFF	; 255
 174:	a9 e6       	ldi	r26, 0x69	; 105
 176:	b8 e1       	ldi	r27, 0x18	; 24
 178:	91 50       	subi	r25, 0x01	; 1
 17a:	a0 40       	sbci	r26, 0x00	; 0
 17c:	b0 40       	sbci	r27, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x90>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x9a>
 182:	00 00       	nop
 184:	e5 cf       	rjmp	.-54     	; 0x150 <main+0x68>

00000186 <gets>:
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 192:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__data_end+0x1>
 196:	23 81       	ldd	r18, Z+3	; 0x03
 198:	20 fd       	sbrc	r18, 0
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <gets+0x1c>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <gets+0x4a>
 1a2:	c9 2f       	mov	r28, r25
 1a4:	d8 2f       	mov	r29, r24
 1a6:	08 2f       	mov	r16, r24
 1a8:	19 2f       	mov	r17, r25
 1aa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1ae:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1b2:	0e 94 1d 01 	call	0x23a	; 0x23a <fgetc>
 1b6:	8f 3f       	cpi	r24, 0xFF	; 255
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	92 07       	cpc	r25, r18
 1bc:	79 f3       	breq	.-34     	; 0x19c <gets+0x16>
 1be:	f8 01       	movw	r30, r16
 1c0:	81 93       	st	Z+, r24
 1c2:	8f 01       	movw	r16, r30
 1c4:	0a 97       	sbiw	r24, 0x0a	; 10
 1c6:	89 f7       	brne	.-30     	; 0x1aa <gets+0x24>
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	10 82       	st	Z, r1
 1cc:	8d 2f       	mov	r24, r29
 1ce:	9c 2f       	mov	r25, r28
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	08 95       	ret

000001da <puts>:
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__data_end+0x2>
 1e6:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__data_end+0x3>
 1ea:	23 81       	ldd	r18, Z+3	; 0x03
 1ec:	21 ff       	sbrs	r18, 1
 1ee:	1b c0       	rjmp	.+54     	; 0x226 <puts+0x4c>
 1f0:	8c 01       	movw	r16, r24
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
 1f4:	c0 e0       	ldi	r28, 0x00	; 0
 1f6:	f8 01       	movw	r30, r16
 1f8:	81 91       	ld	r24, Z+
 1fa:	8f 01       	movw	r16, r30
 1fc:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end+0x2>
 200:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <__data_end+0x3>
 204:	db 01       	movw	r26, r22
 206:	18 96       	adiw	r26, 0x08	; 8
 208:	ed 91       	ld	r30, X+
 20a:	fc 91       	ld	r31, X
 20c:	19 97       	sbiw	r26, 0x09	; 9
 20e:	88 23       	and	r24, r24
 210:	31 f0       	breq	.+12     	; 0x21e <puts+0x44>
 212:	09 95       	icall
 214:	89 2b       	or	r24, r25
 216:	79 f3       	breq	.-34     	; 0x1f6 <puts+0x1c>
 218:	df ef       	ldi	r29, 0xFF	; 255
 21a:	cf ef       	ldi	r28, 0xFF	; 255
 21c:	ec cf       	rjmp	.-40     	; 0x1f6 <puts+0x1c>
 21e:	8a e0       	ldi	r24, 0x0A	; 10
 220:	09 95       	icall
 222:	89 2b       	or	r24, r25
 224:	19 f0       	breq	.+6      	; 0x22c <puts+0x52>
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	9f ef       	ldi	r25, 0xFF	; 255
 22a:	02 c0       	rjmp	.+4      	; 0x230 <puts+0x56>
 22c:	8d 2f       	mov	r24, r29
 22e:	9c 2f       	mov	r25, r28
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	1f 91       	pop	r17
 236:	0f 91       	pop	r16
 238:	08 95       	ret

0000023a <fgetc>:
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ec 01       	movw	r28, r24
 240:	2b 81       	ldd	r18, Y+3	; 0x03
 242:	20 ff       	sbrs	r18, 0
 244:	33 c0       	rjmp	.+102    	; 0x2ac <fgetc+0x72>
 246:	26 ff       	sbrs	r18, 6
 248:	0a c0       	rjmp	.+20     	; 0x25e <fgetc+0x24>
 24a:	2f 7b       	andi	r18, 0xBF	; 191
 24c:	2b 83       	std	Y+3, r18	; 0x03
 24e:	8e 81       	ldd	r24, Y+6	; 0x06
 250:	9f 81       	ldd	r25, Y+7	; 0x07
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	9f 83       	std	Y+7, r25	; 0x07
 256:	8e 83       	std	Y+6, r24	; 0x06
 258:	8a 81       	ldd	r24, Y+2	; 0x02
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	29 c0       	rjmp	.+82     	; 0x2b0 <fgetc+0x76>
 25e:	22 ff       	sbrs	r18, 2
 260:	0f c0       	rjmp	.+30     	; 0x280 <fgetc+0x46>
 262:	e8 81       	ld	r30, Y
 264:	f9 81       	ldd	r31, Y+1	; 0x01
 266:	80 81       	ld	r24, Z
 268:	08 2e       	mov	r0, r24
 26a:	00 0c       	add	r0, r0
 26c:	99 0b       	sbc	r25, r25
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	19 f4       	brne	.+6      	; 0x278 <fgetc+0x3e>
 272:	20 62       	ori	r18, 0x20	; 32
 274:	2b 83       	std	Y+3, r18	; 0x03
 276:	1a c0       	rjmp	.+52     	; 0x2ac <fgetc+0x72>
 278:	31 96       	adiw	r30, 0x01	; 1
 27a:	f9 83       	std	Y+1, r31	; 0x01
 27c:	e8 83       	st	Y, r30
 27e:	0e c0       	rjmp	.+28     	; 0x29c <fgetc+0x62>
 280:	ea 85       	ldd	r30, Y+10	; 0x0a
 282:	fb 85       	ldd	r31, Y+11	; 0x0b
 284:	09 95       	icall
 286:	97 ff       	sbrs	r25, 7
 288:	09 c0       	rjmp	.+18     	; 0x29c <fgetc+0x62>
 28a:	2b 81       	ldd	r18, Y+3	; 0x03
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	11 f0       	breq	.+4      	; 0x294 <fgetc+0x5a>
 290:	80 e2       	ldi	r24, 0x20	; 32
 292:	01 c0       	rjmp	.+2      	; 0x296 <fgetc+0x5c>
 294:	80 e1       	ldi	r24, 0x10	; 16
 296:	82 2b       	or	r24, r18
 298:	8b 83       	std	Y+3, r24	; 0x03
 29a:	08 c0       	rjmp	.+16     	; 0x2ac <fgetc+0x72>
 29c:	2e 81       	ldd	r18, Y+6	; 0x06
 29e:	3f 81       	ldd	r19, Y+7	; 0x07
 2a0:	2f 5f       	subi	r18, 0xFF	; 255
 2a2:	3f 4f       	sbci	r19, 0xFF	; 255
 2a4:	3f 83       	std	Y+7, r19	; 0x07
 2a6:	2e 83       	std	Y+6, r18	; 0x06
 2a8:	99 27       	eor	r25, r25
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <fgetc+0x76>
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	9f ef       	ldi	r25, 0xFF	; 255
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
