
trial_exam_third.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000892  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f2  00000000  00000000  00000b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e9  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000160c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041c  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000087  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001b13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_3>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a1 30       	cpi	r26, 0x01	; 1
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>
  88:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  8c:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <setup>:

uint8_t led_brightness_cyle_flag = 0;

void setup(){
	//enable general interrupt
	sei();
  94:	78 94       	sei
	//enable PB7 pin change interrupt -->PCINT7
	PCICR |= 1 << 0;
  96:	e8 e6       	ldi	r30, 0x68	; 104
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	80 83       	st	Z, r24
	PCMSK0 |= 1 << 7;
  a0:	eb e6       	ldi	r30, 0x6B	; 107
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	80 83       	st	Z, r24
	//set fast PWM
	TCCR0A  = (1 << 7) | (1 << 1) | (1 << 0);
  aa:	83 e8       	ldi	r24, 0x83	; 131
  ac:	84 bd       	out	0x24, r24	; 36
	//start timer with 8 prescale
	TCCR0B |= 1 << 1;
  ae:	85 b5       	in	r24, 0x25	; 37
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	85 bd       	out	0x25, r24	; 37
  b4:	08 95       	ret

000000b6 <set_duty>:
}

void set_duty(uint8_t duty){
	OCR0A = (255 * duty)/ 100;
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	82 9f       	mul	r24, r18
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	64 e6       	ldi	r22, 0x64	; 100
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	0e 94 96 00 	call	0x12c	; 0x12c <__divmodhi4>
  c6:	67 bd       	out	0x27, r22	; 39
  c8:	08 95       	ret

000000ca <__vector_3>:
}

ISR(PCINT0_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
	led_brightness_cyle_flag = 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <main>:

int main(void)
{
   setup();
  e8:	0e 94 4a 00 	call	0x94	; 0x94 <setup>
   uint8_t duty = 0;
  ec:	c0 e0       	ldi	r28, 0x00	; 0
    while (1) 
    {
		if(led_brightness_cyle_flag){
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f2:	88 23       	and	r24, r24
  f4:	41 f0       	breq	.+16     	; 0x106 <main+0x1e>
			//on board led PB6 output
			//on board button PB7 input on default
			DDRD |= 1 << 6;
  f6:	56 9a       	sbi	0x0a, 6	; 10
			if(duty < 100){
  f8:	c4 36       	cpi	r28, 0x64	; 100
  fa:	10 f4       	brcc	.+4      	; 0x100 <main+0x18>
				duty += 2;
  fc:	ce 5f       	subi	r28, 0xFE	; 254
  fe:	09 c0       	rjmp	.+18     	; 0x112 <main+0x2a>
			}else{
				led_brightness_cyle_flag = 0;
 100:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 104:	06 c0       	rjmp	.+12     	; 0x112 <main+0x2a>
			}
		}else{
			if(duty > 0){
 106:	cc 23       	and	r28, r28
 108:	11 f0       	breq	.+4      	; 0x10e <main+0x26>
				duty -= 2;
 10a:	c2 50       	subi	r28, 0x02	; 2
			}
			if(duty == 0){
 10c:	11 f4       	brne	.+4      	; 0x112 <main+0x2a>
				DDRD = 0;
 10e:	1a b8       	out	0x0a, r1	; 10
 110:	c0 e0       	ldi	r28, 0x00	; 0
			}
		}
		set_duty(duty);
 112:	8c 2f       	mov	r24, r28
 114:	0e 94 5b 00 	call	0xb6	; 0xb6 <set_duty>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	83 ef       	ldi	r24, 0xF3	; 243
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x36>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x40>
 128:	00 00       	nop
 12a:	e1 cf       	rjmp	.-62     	; 0xee <main+0x6>

0000012c <__divmodhi4>:
 12c:	97 fb       	bst	r25, 7
 12e:	07 2e       	mov	r0, r23
 130:	16 f4       	brtc	.+4      	; 0x136 <__divmodhi4+0xa>
 132:	00 94       	com	r0
 134:	07 d0       	rcall	.+14     	; 0x144 <__divmodhi4_neg1>
 136:	77 fd       	sbrc	r23, 7
 138:	09 d0       	rcall	.+18     	; 0x14c <__divmodhi4_neg2>
 13a:	0e 94 aa 00 	call	0x154	; 0x154 <__udivmodhi4>
 13e:	07 fc       	sbrc	r0, 7
 140:	05 d0       	rcall	.+10     	; 0x14c <__divmodhi4_neg2>
 142:	3e f4       	brtc	.+14     	; 0x152 <__divmodhi4_exit>

00000144 <__divmodhi4_neg1>:
 144:	90 95       	com	r25
 146:	81 95       	neg	r24
 148:	9f 4f       	sbci	r25, 0xFF	; 255
 14a:	08 95       	ret

0000014c <__divmodhi4_neg2>:
 14c:	70 95       	com	r23
 14e:	61 95       	neg	r22
 150:	7f 4f       	sbci	r23, 0xFF	; 255

00000152 <__divmodhi4_exit>:
 152:	08 95       	ret

00000154 <__udivmodhi4>:
 154:	aa 1b       	sub	r26, r26
 156:	bb 1b       	sub	r27, r27
 158:	51 e1       	ldi	r21, 0x11	; 17
 15a:	07 c0       	rjmp	.+14     	; 0x16a <__udivmodhi4_ep>

0000015c <__udivmodhi4_loop>:
 15c:	aa 1f       	adc	r26, r26
 15e:	bb 1f       	adc	r27, r27
 160:	a6 17       	cp	r26, r22
 162:	b7 07       	cpc	r27, r23
 164:	10 f0       	brcs	.+4      	; 0x16a <__udivmodhi4_ep>
 166:	a6 1b       	sub	r26, r22
 168:	b7 0b       	sbc	r27, r23

0000016a <__udivmodhi4_ep>:
 16a:	88 1f       	adc	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	5a 95       	dec	r21
 170:	a9 f7       	brne	.-22     	; 0x15c <__udivmodhi4_loop>
 172:	80 95       	com	r24
 174:	90 95       	com	r25
 176:	bc 01       	movw	r22, r24
 178:	cd 01       	movw	r24, r26
 17a:	08 95       	ret

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
