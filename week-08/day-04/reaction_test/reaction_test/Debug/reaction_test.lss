
reaction_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000382  00000416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  0000041a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000967  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000836  00000000  00000000  00000e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000356  00000000  00000000  00001679  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000019d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000155  00000000  00000000  00001efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000204f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_4>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_13>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a4 e0       	ldi	r26, 0x04	; 4
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	ac 30       	cpi	r26, 0x0C	; 12
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e8       	ldi	r30, 0x82	; 130
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  a2:	0c 94 bf 01 	jmp	0x37e	; 0x37e <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <time>:
  aa:	fc 01       	movw	r30, r24
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <__system_time>
  b4:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <__system_time+0x1>
  b8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__system_time+0x2>
  bc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__system_time+0x3>
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	30 97       	sbiw	r30, 0x00	; 0
  c4:	21 f0       	breq	.+8      	; 0xce <time+0x24>
  c6:	60 83       	st	Z, r22
  c8:	71 83       	std	Z+1, r23	; 0x01
  ca:	82 83       	std	Z+2, r24	; 0x02
  cc:	93 83       	std	Z+3, r25	; 0x03
  ce:	08 95       	ret

000000d0 <init>:

uint16_t counter = 0;
uint16_t result = 0;

void init(){
	srand(time(0));
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 55 00 	call	0xaa	; 0xaa <time>
  d8:	cb 01       	movw	r24, r22
  da:	0e 94 51 01 	call	0x2a2	; 0x2a2 <srand>
	DDRB = 0b00000011;
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00000000; 
  e2:	17 b8       	out	0x07, r1	; 7
  e4:	08 95       	ret

000000e6 <init_interrupt_button>:
}
void init_interrupt_button(){
	PCICR = 0b00000010;
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	PCMSK1 = 0b00000001;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
  f2:	08 95       	ret

000000f4 <init_timer_counter>:
}

void init_timer_counter(){
	sei();
  f4:	78 94       	sei
	TCCR1A = 0b00000000;
  f6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = 0b00000001;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = 0b00100001;
 100:	81 e2       	ldi	r24, 0x21	; 33
 102:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 106:	08 95       	ret

00000108 <timer_counter_to_random_blink_led>:
}

void timer_counter_to_random_blink_led(uint8_t delay){
	for(uint8_t i = 0; i < delay; i++){
 108:	88 23       	and	r24, r24
 10a:	f9 f0       	breq	.+62     	; 0x14a <timer_counter_to_random_blink_led+0x42>
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(1000);
		PINB = 1 << 0;
 110:	91 e0       	ldi	r25, 0x01	; 1
		if(i == delay - 1){
 112:	48 2f       	mov	r20, r24
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	41 50       	subi	r20, 0x01	; 1
 118:	51 09       	sbc	r21, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	6f ef       	ldi	r22, 0xFF	; 255
 11c:	73 ed       	ldi	r23, 0xD3	; 211
 11e:	e0 e3       	ldi	r30, 0x30	; 48
 120:	61 50       	subi	r22, 0x01	; 1
 122:	70 40       	sbci	r23, 0x00	; 0
 124:	e0 40       	sbci	r30, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <timer_counter_to_random_blink_led+0x18>
 128:	00 c0       	rjmp	.+0      	; 0x12a <timer_counter_to_random_blink_led+0x22>
 12a:	00 00       	nop
}

void timer_counter_to_random_blink_led(uint8_t delay){
	for(uint8_t i = 0; i < delay; i++){
		_delay_ms(1000);
		PINB = 1 << 0;
 12c:	93 b9       	out	0x03, r25	; 3
		if(i == delay - 1){
 12e:	42 17       	cp	r20, r18
 130:	53 07       	cpc	r21, r19
 132:	39 f4       	brne	.+14     	; 0x142 <timer_counter_to_random_blink_led+0x3a>
			PORTB = 1 << 1;
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	85 b9       	out	0x05, r24	; 5
			init_timer_counter();
 138:	0e 94 7a 00 	call	0xf4	; 0xf4 <init_timer_counter>
			init_interrupt_button();
 13c:	0e 94 73 00 	call	0xe6	; 0xe6 <init_interrupt_button>
			break;
 140:	08 95       	ret
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
	TCCR1B = 0b00000001;
	TIMSK1 = 0b00100001;
}

void timer_counter_to_random_blink_led(uint8_t delay){
	for(uint8_t i = 0; i < delay; i++){
 146:	28 17       	cp	r18, r24
 148:	40 f3       	brcs	.-48     	; 0x11a <timer_counter_to_random_blink_led+0x12>
 14a:	08 95       	ret

0000014c <__vector_4>:
			break;
		}
	}
}

ISR(PCINT1_vect){
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
	result = counter / 4;
 15a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <counter>
 15e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <counter+0x1>
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	96 95       	lsr	r25
 168:	87 95       	ror	r24
 16a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 16e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
}
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <__vector_13>:

ISR(TIMER1_OVF_vect){
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
	//counter++;
}
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <main>:


int main(void)
{
    
	uint8_t random_number_timer = rand()% 10 + 1;
 194:	0e 94 4c 01 	call	0x298	; 0x298 <rand>
 198:	ec 01       	movw	r28, r24
	init();
 19a:	0e 94 68 00 	call	0xd0	; 0xd0 <init>
	timer_counter_to_random_blink_led(random_number_timer);
 19e:	ce 01       	movw	r24, r28
 1a0:	6a e0       	ldi	r22, 0x0A	; 10
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__divmodhi4>
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	0e 94 84 00 	call	0x108	; 0x108 <timer_counter_to_random_blink_led>
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <main+0x1a>

000001b0 <__divmodhi4>:
 1b0:	97 fb       	bst	r25, 7
 1b2:	07 2e       	mov	r0, r23
 1b4:	16 f4       	brtc	.+4      	; 0x1ba <__divmodhi4+0xa>
 1b6:	00 94       	com	r0
 1b8:	07 d0       	rcall	.+14     	; 0x1c8 <__divmodhi4_neg1>
 1ba:	77 fd       	sbrc	r23, 7
 1bc:	09 d0       	rcall	.+18     	; 0x1d0 <__divmodhi4_neg2>
 1be:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <__udivmodhi4>
 1c2:	07 fc       	sbrc	r0, 7
 1c4:	05 d0       	rcall	.+10     	; 0x1d0 <__divmodhi4_neg2>
 1c6:	3e f4       	brtc	.+14     	; 0x1d6 <__divmodhi4_exit>

000001c8 <__divmodhi4_neg1>:
 1c8:	90 95       	com	r25
 1ca:	81 95       	neg	r24
 1cc:	9f 4f       	sbci	r25, 0xFF	; 255
 1ce:	08 95       	ret

000001d0 <__divmodhi4_neg2>:
 1d0:	70 95       	com	r23
 1d2:	61 95       	neg	r22
 1d4:	7f 4f       	sbci	r23, 0xFF	; 255

000001d6 <__divmodhi4_exit>:
 1d6:	08 95       	ret

000001d8 <__udivmodhi4>:
 1d8:	aa 1b       	sub	r26, r26
 1da:	bb 1b       	sub	r27, r27
 1dc:	51 e1       	ldi	r21, 0x11	; 17
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <__udivmodhi4_ep>

000001e0 <__udivmodhi4_loop>:
 1e0:	aa 1f       	adc	r26, r26
 1e2:	bb 1f       	adc	r27, r27
 1e4:	a6 17       	cp	r26, r22
 1e6:	b7 07       	cpc	r27, r23
 1e8:	10 f0       	brcs	.+4      	; 0x1ee <__udivmodhi4_ep>
 1ea:	a6 1b       	sub	r26, r22
 1ec:	b7 0b       	sbc	r27, r23

000001ee <__udivmodhi4_ep>:
 1ee:	88 1f       	adc	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	5a 95       	dec	r21
 1f4:	a9 f7       	brne	.-22     	; 0x1e0 <__udivmodhi4_loop>
 1f6:	80 95       	com	r24
 1f8:	90 95       	com	r25
 1fa:	bc 01       	movw	r22, r24
 1fc:	cd 01       	movw	r24, r26
 1fe:	08 95       	ret

00000200 <do_rand>:
 200:	8f 92       	push	r8
 202:	9f 92       	push	r9
 204:	af 92       	push	r10
 206:	bf 92       	push	r11
 208:	cf 92       	push	r12
 20a:	df 92       	push	r13
 20c:	ef 92       	push	r14
 20e:	ff 92       	push	r15
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	ec 01       	movw	r28, r24
 216:	68 81       	ld	r22, Y
 218:	79 81       	ldd	r23, Y+1	; 0x01
 21a:	8a 81       	ldd	r24, Y+2	; 0x02
 21c:	9b 81       	ldd	r25, Y+3	; 0x03
 21e:	61 15       	cp	r22, r1
 220:	71 05       	cpc	r23, r1
 222:	81 05       	cpc	r24, r1
 224:	91 05       	cpc	r25, r1
 226:	21 f4       	brne	.+8      	; 0x230 <do_rand+0x30>
 228:	64 e2       	ldi	r22, 0x24	; 36
 22a:	79 ed       	ldi	r23, 0xD9	; 217
 22c:	8b e5       	ldi	r24, 0x5B	; 91
 22e:	97 e0       	ldi	r25, 0x07	; 7
 230:	2d e1       	ldi	r18, 0x1D	; 29
 232:	33 ef       	ldi	r19, 0xF3	; 243
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__divmodsi4>
 23c:	49 01       	movw	r8, r18
 23e:	5a 01       	movw	r10, r20
 240:	9b 01       	movw	r18, r22
 242:	ac 01       	movw	r20, r24
 244:	a7 ea       	ldi	r26, 0xA7	; 167
 246:	b1 e4       	ldi	r27, 0x41	; 65
 248:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__muluhisi3>
 24c:	6b 01       	movw	r12, r22
 24e:	7c 01       	movw	r14, r24
 250:	ac ee       	ldi	r26, 0xEC	; 236
 252:	b4 ef       	ldi	r27, 0xF4	; 244
 254:	a5 01       	movw	r20, r10
 256:	94 01       	movw	r18, r8
 258:	0e 94 89 01 	call	0x312	; 0x312 <__mulohisi3>
 25c:	dc 01       	movw	r26, r24
 25e:	cb 01       	movw	r24, r22
 260:	8c 0d       	add	r24, r12
 262:	9d 1d       	adc	r25, r13
 264:	ae 1d       	adc	r26, r14
 266:	bf 1d       	adc	r27, r15
 268:	b7 ff       	sbrs	r27, 7
 26a:	03 c0       	rjmp	.+6      	; 0x272 <do_rand+0x72>
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	a1 09       	sbc	r26, r1
 270:	b0 48       	sbci	r27, 0x80	; 128
 272:	88 83       	st	Y, r24
 274:	99 83       	std	Y+1, r25	; 0x01
 276:	aa 83       	std	Y+2, r26	; 0x02
 278:	bb 83       	std	Y+3, r27	; 0x03
 27a:	9f 77       	andi	r25, 0x7F	; 127
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	cf 90       	pop	r12
 288:	bf 90       	pop	r11
 28a:	af 90       	pop	r10
 28c:	9f 90       	pop	r9
 28e:	8f 90       	pop	r8
 290:	08 95       	ret

00000292 <rand_r>:
 292:	0e 94 00 01 	call	0x200	; 0x200 <do_rand>
 296:	08 95       	ret

00000298 <rand>:
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 00 01 	call	0x200	; 0x200 <do_rand>
 2a0:	08 95       	ret

000002a2 <srand>:
 2a2:	a0 e0       	ldi	r26, 0x00	; 0
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2aa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2ae:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 2b2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 2b6:	08 95       	ret

000002b8 <__divmodsi4>:
 2b8:	05 2e       	mov	r0, r21
 2ba:	97 fb       	bst	r25, 7
 2bc:	1e f4       	brtc	.+6      	; 0x2c4 <__divmodsi4+0xc>
 2be:	00 94       	com	r0
 2c0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__negsi2>
 2c4:	57 fd       	sbrc	r21, 7
 2c6:	07 d0       	rcall	.+14     	; 0x2d6 <__divmodsi4_neg2>
 2c8:	0e 94 8e 01 	call	0x31c	; 0x31c <__udivmodsi4>
 2cc:	07 fc       	sbrc	r0, 7
 2ce:	03 d0       	rcall	.+6      	; 0x2d6 <__divmodsi4_neg2>
 2d0:	4e f4       	brtc	.+18     	; 0x2e4 <__divmodsi4_exit>
 2d2:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__negsi2>

000002d6 <__divmodsi4_neg2>:
 2d6:	50 95       	com	r21
 2d8:	40 95       	com	r20
 2da:	30 95       	com	r19
 2dc:	21 95       	neg	r18
 2de:	3f 4f       	sbci	r19, 0xFF	; 255
 2e0:	4f 4f       	sbci	r20, 0xFF	; 255
 2e2:	5f 4f       	sbci	r21, 0xFF	; 255

000002e4 <__divmodsi4_exit>:
 2e4:	08 95       	ret

000002e6 <__negsi2>:
 2e6:	90 95       	com	r25
 2e8:	80 95       	com	r24
 2ea:	70 95       	com	r23
 2ec:	61 95       	neg	r22
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255
 2f0:	8f 4f       	sbci	r24, 0xFF	; 255
 2f2:	9f 4f       	sbci	r25, 0xFF	; 255
 2f4:	08 95       	ret

000002f6 <__muluhisi3>:
 2f6:	0e 94 b0 01 	call	0x360	; 0x360 <__umulhisi3>
 2fa:	a5 9f       	mul	r26, r21
 2fc:	90 0d       	add	r25, r0
 2fe:	b4 9f       	mul	r27, r20
 300:	90 0d       	add	r25, r0
 302:	a4 9f       	mul	r26, r20
 304:	80 0d       	add	r24, r0
 306:	91 1d       	adc	r25, r1
 308:	11 24       	eor	r1, r1
 30a:	08 95       	ret

0000030c <__mulshisi3>:
 30c:	b7 ff       	sbrs	r27, 7
 30e:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__muluhisi3>

00000312 <__mulohisi3>:
 312:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__muluhisi3>
 316:	82 1b       	sub	r24, r18
 318:	93 0b       	sbc	r25, r19
 31a:	08 95       	ret

0000031c <__udivmodsi4>:
 31c:	a1 e2       	ldi	r26, 0x21	; 33
 31e:	1a 2e       	mov	r1, r26
 320:	aa 1b       	sub	r26, r26
 322:	bb 1b       	sub	r27, r27
 324:	fd 01       	movw	r30, r26
 326:	0d c0       	rjmp	.+26     	; 0x342 <__udivmodsi4_ep>

00000328 <__udivmodsi4_loop>:
 328:	aa 1f       	adc	r26, r26
 32a:	bb 1f       	adc	r27, r27
 32c:	ee 1f       	adc	r30, r30
 32e:	ff 1f       	adc	r31, r31
 330:	a2 17       	cp	r26, r18
 332:	b3 07       	cpc	r27, r19
 334:	e4 07       	cpc	r30, r20
 336:	f5 07       	cpc	r31, r21
 338:	20 f0       	brcs	.+8      	; 0x342 <__udivmodsi4_ep>
 33a:	a2 1b       	sub	r26, r18
 33c:	b3 0b       	sbc	r27, r19
 33e:	e4 0b       	sbc	r30, r20
 340:	f5 0b       	sbc	r31, r21

00000342 <__udivmodsi4_ep>:
 342:	66 1f       	adc	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	88 1f       	adc	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	1a 94       	dec	r1
 34c:	69 f7       	brne	.-38     	; 0x328 <__udivmodsi4_loop>
 34e:	60 95       	com	r22
 350:	70 95       	com	r23
 352:	80 95       	com	r24
 354:	90 95       	com	r25
 356:	9b 01       	movw	r18, r22
 358:	ac 01       	movw	r20, r24
 35a:	bd 01       	movw	r22, r26
 35c:	cf 01       	movw	r24, r30
 35e:	08 95       	ret

00000360 <__umulhisi3>:
 360:	a2 9f       	mul	r26, r18
 362:	b0 01       	movw	r22, r0
 364:	b3 9f       	mul	r27, r19
 366:	c0 01       	movw	r24, r0
 368:	a3 9f       	mul	r26, r19
 36a:	70 0d       	add	r23, r0
 36c:	81 1d       	adc	r24, r1
 36e:	11 24       	eor	r1, r1
 370:	91 1d       	adc	r25, r1
 372:	b2 9f       	mul	r27, r18
 374:	70 0d       	add	r23, r0
 376:	81 1d       	adc	r24, r1
 378:	11 24       	eor	r1, r1
 37a:	91 1d       	adc	r25, r1
 37c:	08 95       	ret

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
