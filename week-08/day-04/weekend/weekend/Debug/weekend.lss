
weekend.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000039a  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800104  00800104  00000432  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a18  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088e  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043d  00000000  00000000  000017ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00001bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047c  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020c  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_1>
   8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_2>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_13>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a4 e0       	ldi	r26, 0x04	; 4
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	aa 30       	cpi	r26, 0x0A	; 10
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ea e9       	ldi	r30, 0x9A	; 154
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  a2:	0c 94 cb 01 	jmp	0x396	; 0x396 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <time>:
  aa:	fc 01       	movw	r30, r24
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__system_time>
  b4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <__system_time+0x1>
  b8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__system_time+0x2>
  bc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__system_time+0x3>
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	30 97       	sbiw	r30, 0x00	; 0
  c4:	21 f0       	breq	.+8      	; 0xce <time+0x24>
  c6:	60 83       	st	Z, r22
  c8:	71 83       	std	Z+1, r23	; 0x01
  ca:	82 83       	std	Z+2, r24	; 0x02
  cc:	93 83       	std	Z+3, r25	; 0x03
  ce:	08 95       	ret

000000d0 <init>:
#include <time.h>

uint16_t counter = 0;

void init(){
	srand(time(0));
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 55 00 	call	0xaa	; 0xaa <time>
  d8:	cb 01       	movw	r24, r22
  da:	0e 94 5d 01 	call	0x2ba	; 0x2ba <srand>
	sei();
  de:	78 94       	sei
	DDRC = 0b00000111;
  e0:	87 e0       	ldi	r24, 0x07	; 7
  e2:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000111;
  e4:	88 b9       	out	0x08, r24	; 8
  e6:	08 95       	ret

000000e8 <__vector_1>:
}
ISR(INT0_vect){ //PD2
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	4f 93       	push	r20
  f8:	5f 93       	push	r21
  fa:	6f 93       	push	r22
  fc:	7f 93       	push	r23
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	af 93       	push	r26
 104:	bf 93       	push	r27
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
	cli();
 10a:	f8 94       	cli
	counter = 0;
 10c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 110:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	blink_led_1HZ(5);
 114:	85 e0       	ldi	r24, 0x05	; 5
 116:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <blink_led_1HZ>
	light_up_start_game();
 11a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <light_up_start_game>
}
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	bf 91       	pop	r27
 124:	af 91       	pop	r26
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	7f 91       	pop	r23
 12c:	6f 91       	pop	r22
 12e:	5f 91       	pop	r21
 130:	4f 91       	pop	r20
 132:	3f 91       	pop	r19
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_2>:
ISR(INT1_vect){ //PD3
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
	TCCR1B = 0b00000000;
 14e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	if(counter > 80){
 152:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 156:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 15a:	81 35       	cpi	r24, 0x51	; 81
 15c:	91 05       	cpc	r25, r1
 15e:	18 f0       	brcs	.+6      	; 0x166 <__vector_2+0x26>
		PORTC = 0b00000110;
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	88 b9       	out	0x08, r24	; 8
 164:	02 c0       	rjmp	.+4      	; 0x16a <__vector_2+0x2a>
	}else{
		PORTC = 0b00000101;
 166:	85 e0       	ldi	r24, 0x05	; 5
 168:	88 b9       	out	0x08, r24	; 8
	}
}
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_13>:

ISR(TIMER1_OVF_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
	counter++;
 186:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 18a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 194:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
}
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <main>:


int main(void)
{
    init();
 1a6:	0e 94 68 00 	call	0xd0	; 0xd0 <init>
	set_external_interrupt_setup();
 1aa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <set_external_interrupt_setup>
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <main+0x8>

000001b0 <set_external_interrupt_setup>:
#include "utility.h"

void set_external_interrupt_setup(){
	EICRA |= 0b00001111;
 1b0:	e9 e6       	ldi	r30, 0x69	; 105
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	8f 60       	ori	r24, 0x0F	; 15
 1b8:	80 83       	st	Z, r24
	EIMSK |= 0b00000011; 
 1ba:	8d b3       	in	r24, 0x1d	; 29
 1bc:	83 60       	ori	r24, 0x03	; 3
 1be:	8d bb       	out	0x1d, r24	; 29
 1c0:	08 95       	ret

000001c2 <blink_led_1HZ>:
}

void blink_led_1HZ(uint8_t delay_in_sec){
	for (uint8_t i = 0; i < delay_in_sec; i++)
 1c2:	88 23       	and	r24, r24
 1c4:	89 f0       	breq	.+34     	; 0x1e8 <blink_led_1HZ+0x26>
 1c6:	90 e0       	ldi	r25, 0x00	; 0
	{
		PORTC = 0b00001111;
 1c8:	3f e0       	ldi	r19, 0x0F	; 15
		_delay_ms(1000);
		PORTC = 0b00000111;
 1ca:	27 e0       	ldi	r18, 0x07	; 7
}

void blink_led_1HZ(uint8_t delay_in_sec){
	for (uint8_t i = 0; i < delay_in_sec; i++)
	{
		PORTC = 0b00001111;
 1cc:	38 b9       	out	0x08, r19	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	4f ef       	ldi	r20, 0xFF	; 255
 1d0:	53 ed       	ldi	r21, 0xD3	; 211
 1d2:	60 e3       	ldi	r22, 0x30	; 48
 1d4:	41 50       	subi	r20, 0x01	; 1
 1d6:	50 40       	sbci	r21, 0x00	; 0
 1d8:	60 40       	sbci	r22, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <blink_led_1HZ+0x12>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <blink_led_1HZ+0x1c>
 1de:	00 00       	nop
		_delay_ms(1000);
		PORTC = 0b00000111;
 1e0:	28 b9       	out	0x08, r18	; 8
	EICRA |= 0b00001111;
	EIMSK |= 0b00000011; 
}

void blink_led_1HZ(uint8_t delay_in_sec){
	for (uint8_t i = 0; i < delay_in_sec; i++)
 1e2:	9f 5f       	subi	r25, 0xFF	; 255
 1e4:	89 13       	cpse	r24, r25
 1e6:	f2 cf       	rjmp	.-28     	; 0x1cc <blink_led_1HZ+0xa>
 1e8:	08 95       	ret

000001ea <light_up_start_game>:
		_delay_ms(1000);
		PORTC = 0b00000111;
	}
}
void light_up_start_game(){
	PORTC &= 0b00000011;
 1ea:	88 b1       	in	r24, 0x08	; 8
 1ec:	83 70       	andi	r24, 0x03	; 3
 1ee:	88 b9       	out	0x08, r24	; 8
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	83 ed       	ldi	r24, 0xD3	; 211
 1f4:	90 e3       	ldi	r25, 0x30	; 48
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <light_up_start_game+0xc>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <light_up_start_game+0x16>
 200:	00 00       	nop
	_delay_ms(1000);
	PORTC = 0b00000111;
 202:	87 e0       	ldi	r24, 0x07	; 7
 204:	88 b9       	out	0x08, r24	; 8
	sei();
 206:	78 94       	sei
	TIMSK1 = 0b00000001;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TCCR1A = 0b00000000;
 20e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = 0b00000001; // prescle : 1024 ---> every overflow 0.000064? sec
 212:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 216:	08 95       	ret

00000218 <do_rand>:
 218:	8f 92       	push	r8
 21a:	9f 92       	push	r9
 21c:	af 92       	push	r10
 21e:	bf 92       	push	r11
 220:	cf 92       	push	r12
 222:	df 92       	push	r13
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
 22e:	68 81       	ld	r22, Y
 230:	79 81       	ldd	r23, Y+1	; 0x01
 232:	8a 81       	ldd	r24, Y+2	; 0x02
 234:	9b 81       	ldd	r25, Y+3	; 0x03
 236:	61 15       	cp	r22, r1
 238:	71 05       	cpc	r23, r1
 23a:	81 05       	cpc	r24, r1
 23c:	91 05       	cpc	r25, r1
 23e:	21 f4       	brne	.+8      	; 0x248 <do_rand+0x30>
 240:	64 e2       	ldi	r22, 0x24	; 36
 242:	79 ed       	ldi	r23, 0xD9	; 217
 244:	8b e5       	ldi	r24, 0x5B	; 91
 246:	97 e0       	ldi	r25, 0x07	; 7
 248:	2d e1       	ldi	r18, 0x1D	; 29
 24a:	33 ef       	ldi	r19, 0xF3	; 243
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodsi4>
 254:	49 01       	movw	r8, r18
 256:	5a 01       	movw	r10, r20
 258:	9b 01       	movw	r18, r22
 25a:	ac 01       	movw	r20, r24
 25c:	a7 ea       	ldi	r26, 0xA7	; 167
 25e:	b1 e4       	ldi	r27, 0x41	; 65
 260:	0e 94 87 01 	call	0x30e	; 0x30e <__muluhisi3>
 264:	6b 01       	movw	r12, r22
 266:	7c 01       	movw	r14, r24
 268:	ac ee       	ldi	r26, 0xEC	; 236
 26a:	b4 ef       	ldi	r27, 0xF4	; 244
 26c:	a5 01       	movw	r20, r10
 26e:	94 01       	movw	r18, r8
 270:	0e 94 95 01 	call	0x32a	; 0x32a <__mulohisi3>
 274:	dc 01       	movw	r26, r24
 276:	cb 01       	movw	r24, r22
 278:	8c 0d       	add	r24, r12
 27a:	9d 1d       	adc	r25, r13
 27c:	ae 1d       	adc	r26, r14
 27e:	bf 1d       	adc	r27, r15
 280:	b7 ff       	sbrs	r27, 7
 282:	03 c0       	rjmp	.+6      	; 0x28a <do_rand+0x72>
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	a1 09       	sbc	r26, r1
 288:	b0 48       	sbci	r27, 0x80	; 128
 28a:	88 83       	st	Y, r24
 28c:	99 83       	std	Y+1, r25	; 0x01
 28e:	aa 83       	std	Y+2, r26	; 0x02
 290:	bb 83       	std	Y+3, r27	; 0x03
 292:	9f 77       	andi	r25, 0x7F	; 127
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	ff 90       	pop	r15
 29a:	ef 90       	pop	r14
 29c:	df 90       	pop	r13
 29e:	cf 90       	pop	r12
 2a0:	bf 90       	pop	r11
 2a2:	af 90       	pop	r10
 2a4:	9f 90       	pop	r9
 2a6:	8f 90       	pop	r8
 2a8:	08 95       	ret

000002aa <rand_r>:
 2aa:	0e 94 0c 01 	call	0x218	; 0x218 <do_rand>
 2ae:	08 95       	ret

000002b0 <rand>:
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	0e 94 0c 01 	call	0x218	; 0x218 <do_rand>
 2b8:	08 95       	ret

000002ba <srand>:
 2ba:	a0 e0       	ldi	r26, 0x00	; 0
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2c6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 2ca:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 2ce:	08 95       	ret

000002d0 <__divmodsi4>:
 2d0:	05 2e       	mov	r0, r21
 2d2:	97 fb       	bst	r25, 7
 2d4:	1e f4       	brtc	.+6      	; 0x2dc <__divmodsi4+0xc>
 2d6:	00 94       	com	r0
 2d8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__negsi2>
 2dc:	57 fd       	sbrc	r21, 7
 2de:	07 d0       	rcall	.+14     	; 0x2ee <__divmodsi4_neg2>
 2e0:	0e 94 9a 01 	call	0x334	; 0x334 <__udivmodsi4>
 2e4:	07 fc       	sbrc	r0, 7
 2e6:	03 d0       	rcall	.+6      	; 0x2ee <__divmodsi4_neg2>
 2e8:	4e f4       	brtc	.+18     	; 0x2fc <__divmodsi4_exit>
 2ea:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__negsi2>

000002ee <__divmodsi4_neg2>:
 2ee:	50 95       	com	r21
 2f0:	40 95       	com	r20
 2f2:	30 95       	com	r19
 2f4:	21 95       	neg	r18
 2f6:	3f 4f       	sbci	r19, 0xFF	; 255
 2f8:	4f 4f       	sbci	r20, 0xFF	; 255
 2fa:	5f 4f       	sbci	r21, 0xFF	; 255

000002fc <__divmodsi4_exit>:
 2fc:	08 95       	ret

000002fe <__negsi2>:
 2fe:	90 95       	com	r25
 300:	80 95       	com	r24
 302:	70 95       	com	r23
 304:	61 95       	neg	r22
 306:	7f 4f       	sbci	r23, 0xFF	; 255
 308:	8f 4f       	sbci	r24, 0xFF	; 255
 30a:	9f 4f       	sbci	r25, 0xFF	; 255
 30c:	08 95       	ret

0000030e <__muluhisi3>:
 30e:	0e 94 bc 01 	call	0x378	; 0x378 <__umulhisi3>
 312:	a5 9f       	mul	r26, r21
 314:	90 0d       	add	r25, r0
 316:	b4 9f       	mul	r27, r20
 318:	90 0d       	add	r25, r0
 31a:	a4 9f       	mul	r26, r20
 31c:	80 0d       	add	r24, r0
 31e:	91 1d       	adc	r25, r1
 320:	11 24       	eor	r1, r1
 322:	08 95       	ret

00000324 <__mulshisi3>:
 324:	b7 ff       	sbrs	r27, 7
 326:	0c 94 87 01 	jmp	0x30e	; 0x30e <__muluhisi3>

0000032a <__mulohisi3>:
 32a:	0e 94 87 01 	call	0x30e	; 0x30e <__muluhisi3>
 32e:	82 1b       	sub	r24, r18
 330:	93 0b       	sbc	r25, r19
 332:	08 95       	ret

00000334 <__udivmodsi4>:
 334:	a1 e2       	ldi	r26, 0x21	; 33
 336:	1a 2e       	mov	r1, r26
 338:	aa 1b       	sub	r26, r26
 33a:	bb 1b       	sub	r27, r27
 33c:	fd 01       	movw	r30, r26
 33e:	0d c0       	rjmp	.+26     	; 0x35a <__udivmodsi4_ep>

00000340 <__udivmodsi4_loop>:
 340:	aa 1f       	adc	r26, r26
 342:	bb 1f       	adc	r27, r27
 344:	ee 1f       	adc	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	a2 17       	cp	r26, r18
 34a:	b3 07       	cpc	r27, r19
 34c:	e4 07       	cpc	r30, r20
 34e:	f5 07       	cpc	r31, r21
 350:	20 f0       	brcs	.+8      	; 0x35a <__udivmodsi4_ep>
 352:	a2 1b       	sub	r26, r18
 354:	b3 0b       	sbc	r27, r19
 356:	e4 0b       	sbc	r30, r20
 358:	f5 0b       	sbc	r31, r21

0000035a <__udivmodsi4_ep>:
 35a:	66 1f       	adc	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	88 1f       	adc	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	1a 94       	dec	r1
 364:	69 f7       	brne	.-38     	; 0x340 <__udivmodsi4_loop>
 366:	60 95       	com	r22
 368:	70 95       	com	r23
 36a:	80 95       	com	r24
 36c:	90 95       	com	r25
 36e:	9b 01       	movw	r18, r22
 370:	ac 01       	movw	r20, r24
 372:	bd 01       	movw	r22, r26
 374:	cf 01       	movw	r24, r30
 376:	08 95       	ret

00000378 <__umulhisi3>:
 378:	a2 9f       	mul	r26, r18
 37a:	b0 01       	movw	r22, r0
 37c:	b3 9f       	mul	r27, r19
 37e:	c0 01       	movw	r24, r0
 380:	a3 9f       	mul	r26, r19
 382:	70 0d       	add	r23, r0
 384:	81 1d       	adc	r24, r1
 386:	11 24       	eor	r1, r1
 388:	91 1d       	adc	r25, r1
 38a:	b2 9f       	mul	r27, r18
 38c:	70 0d       	add	r23, r0
 38e:	81 1d       	adc	r24, r1
 390:	11 24       	eor	r1, r1
 392:	91 1d       	adc	r25, r1
 394:	08 95       	ret

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
