
multipleled.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008dd  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078f  00000000  00000000  00000af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f0  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003eb  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e9  00000000  00000000  0000197f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 42 00 	call	0x84	; 0x84 <main>
  7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <main>:
#include <util/delay.h>


int main(void)
{
	DDRB = 0b00001111;
  84:	8f e0       	ldi	r24, 0x0F	; 15
  86:	84 b9       	out	0x04, r24	; 4
	uint8_t flag = 0; 
  88:	50 e0       	ldi	r21, 0x00	; 0
		}
		while (flag == 1)
			{
			for (uint8_t i = 0; i < 4; i++)
				{
					PORTB = PORTB ^ (1 << i);
  8a:	61 e0       	ldi	r22, 0x01	; 1
  8c:	70 e0       	ldi	r23, 0x00	; 0
					_delay_ms(2000);
					PORTB = 0;
				}
				if((PINC & 1 << 5)){
					_delay_ms(200);
					flag = 0;
  8e:	e0 e0       	ldi	r30, 0x00	; 0
				_delay_ms(2000);
				PORTB = 0;
			}
			if((PINC & 1 << 5)){
				_delay_ms(200);
				flag = 1;
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	21 c0       	rjmp	.+66     	; 0xd6 <main+0x52>
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	90 e0       	ldi	r25, 0x00	; 0
	
		
		while(flag == 0){
		for (uint8_t i = 4; i >= 1; i--)
			{
				PORTB = PORTB ^ (1 << (i - 1));
  98:	45 b1       	in	r20, 0x05	; 5
  9a:	9b 01       	movw	r18, r22
  9c:	08 2e       	mov	r0, r24
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x20>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <main+0x1c>
  a8:	24 27       	eor	r18, r20
  aa:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f e7       	ldi	r18, 0x7F	; 127
  ae:	3a e1       	ldi	r19, 0x1A	; 26
  b0:	46 e0       	ldi	r20, 0x06	; 6
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	30 40       	sbci	r19, 0x00	; 0
  b6:	40 40       	sbci	r20, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x2e>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x38>
  bc:	00 00       	nop
				_delay_ms(2000);
				PORTB = 0;
  be:	15 b8       	out	0x05, r1	; 5
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	50 f7       	brcc	.-44     	; 0x98 <main+0x14>
			}
			if((PINC & 1 << 5)){
  c4:	35 9b       	sbis	0x06, 5	; 6
  c6:	07 c0       	rjmp	.+14     	; 0xd6 <main+0x52>
  c8:	8f e4       	ldi	r24, 0x4F	; 79
  ca:	93 ec       	ldi	r25, 0xC3	; 195
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x48>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x4e>
  d2:	00 00       	nop
				_delay_ms(200);
				flag = 1;
  d4:	5f 2f       	mov	r21, r31
 
    while (1) 
    {
	
		
		while(flag == 0){
  d6:	55 23       	and	r21, r21
  d8:	e9 f2       	breq	.-70     	; 0x94 <main+0x10>
  da:	22 c0       	rjmp	.+68     	; 0x120 <main+0x9c>
		}
		while (flag == 1)
			{
			for (uint8_t i = 0; i < 4; i++)
				{
					PORTB = PORTB ^ (1 << i);
  dc:	45 b1       	in	r20, 0x05	; 5
  de:	9b 01       	movw	r18, r22
  e0:	08 2e       	mov	r0, r24
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <main+0x64>
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <main+0x60>
  ec:	24 27       	eor	r18, r20
  ee:	25 b9       	out	0x05, r18	; 5
  f0:	2f e7       	ldi	r18, 0x7F	; 127
  f2:	3a e1       	ldi	r19, 0x1A	; 26
  f4:	46 e0       	ldi	r20, 0x06	; 6
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	30 40       	sbci	r19, 0x00	; 0
  fa:	40 40       	sbci	r20, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x72>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x7c>
 100:	00 00       	nop
					_delay_ms(2000);
					PORTB = 0;
 102:	15 b8       	out	0x05, r1	; 5
 104:	01 96       	adiw	r24, 0x01	; 1
				flag = 1;
			}
		}
		while (flag == 1)
			{
			for (uint8_t i = 0; i < 4; i++)
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	91 05       	cpc	r25, r1
 10a:	41 f7       	brne	.-48     	; 0xdc <main+0x58>
				{
					PORTB = PORTB ^ (1 << i);
					_delay_ms(2000);
					PORTB = 0;
				}
				if((PINC & 1 << 5)){
 10c:	35 9b       	sbis	0x06, 5	; 6
 10e:	0a c0       	rjmp	.+20     	; 0x124 <main+0xa0>
 110:	8f e4       	ldi	r24, 0x4F	; 79
 112:	93 ec       	ldi	r25, 0xC3	; 195
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x90>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x96>
 11a:	00 00       	nop
					_delay_ms(200);
					flag = 0;
 11c:	5e 2f       	mov	r21, r30
 11e:	db cf       	rjmp	.-74     	; 0xd6 <main+0x52>
			if((PINC & 1 << 5)){
				_delay_ms(200);
				flag = 1;
			}
		}
		while (flag == 1)
 120:	51 30       	cpi	r21, 0x01	; 1
 122:	c9 f6       	brne	.-78     	; 0xd6 <main+0x52>


int main(void)
{
	DDRB = 0b00001111;
	uint8_t flag = 0; 
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	d9 cf       	rjmp	.-78     	; 0xdc <main+0x58>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
