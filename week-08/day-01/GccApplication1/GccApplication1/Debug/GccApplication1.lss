
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000907  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d5  00000000  00000000  00000b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e2  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000411  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c6  00000000  00000000  00001a29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001bef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  7c:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <delay_125ms>:
//

void delay_125ms(uint8_t times){
	for (uint8_t l = 0; l < 3; l++)
	{
	for (uint8_t i = 0; i < times; i++)
  84:	33 e0       	ldi	r19, 0x03	; 3
	{
		PORTB = 1 << 5;
  86:	20 e2       	ldi	r18, 0x20	; 32
  88:	1a c0       	rjmp	.+52     	; 0xbe <delay_125ms+0x3a>
//

void delay_125ms(uint8_t times){
	for (uint8_t l = 0; l < 3; l++)
	{
	for (uint8_t i = 0; i < times; i++)
  8a:	90 e0       	ldi	r25, 0x00	; 0
	{
		PORTB = 1 << 5;
  8c:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	4f e7       	ldi	r20, 0x7F	; 127
  90:	5a e1       	ldi	r21, 0x1A	; 26
  92:	66 e0       	ldi	r22, 0x06	; 6
  94:	41 50       	subi	r20, 0x01	; 1
  96:	50 40       	sbci	r21, 0x00	; 0
  98:	60 40       	sbci	r22, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <delay_125ms+0x10>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <delay_125ms+0x1a>
  9e:	00 00       	nop
//

void delay_125ms(uint8_t times){
	for (uint8_t l = 0; l < 3; l++)
	{
	for (uint8_t i = 0; i < times; i++)
  a0:	9f 5f       	subi	r25, 0xFF	; 255
  a2:	89 13       	cpse	r24, r25
  a4:	f3 cf       	rjmp	.-26     	; 0x8c <delay_125ms+0x8>
	{
		PORTB = 1 << 5;
		_delay_ms(125);
	}
	PORTB = 0;
  a6:	15 b8       	out	0x05, r1	; 5
  a8:	9f e7       	ldi	r25, 0x7F	; 127
  aa:	4a e1       	ldi	r20, 0x1A	; 26
  ac:	56 e0       	ldi	r21, 0x06	; 6
  ae:	91 50       	subi	r25, 0x01	; 1
  b0:	40 40       	sbci	r20, 0x00	; 0
  b2:	50 40       	sbci	r21, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <delay_125ms+0x2a>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <delay_125ms+0x34>
  b8:	00 00       	nop
  ba:	31 50       	subi	r19, 0x01	; 1
//	_delay_ms(250);
//}
//

void delay_125ms(uint8_t times){
	for (uint8_t l = 0; l < 3; l++)
  bc:	19 f0       	breq	.+6      	; 0xc4 <delay_125ms+0x40>
	{
	for (uint8_t i = 0; i < times; i++)
  be:	81 11       	cpse	r24, r1
  c0:	e4 cf       	rjmp	.-56     	; 0x8a <delay_125ms+0x6>
  c2:	f1 cf       	rjmp	.-30     	; 0xa6 <delay_125ms+0x22>
  c4:	08 95       	ret

000000c6 <main>:
	}
}


int main(void)
{
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	00 d0       	rcall	.+0      	; 0xcc <main+0x6>
  cc:	00 d0       	rcall	.+0      	; 0xce <main+0x8>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	DDRB = 1 << 5;
  d2:	80 e2       	ldi	r24, 0x20	; 32
  d4:	84 b9       	out	0x04, r24	; 4
	uint8_t counter = 0;


    while (1) 
    {
		uint8_t arr[] = {1, 2, 4, 8};
  d6:	88 24       	eor	r8, r8
  d8:	83 94       	inc	r8
  da:	68 94       	set
  dc:	99 24       	eor	r9, r9
  de:	91 f8       	bld	r9, 1
  e0:	68 94       	set
  e2:	aa 24       	eor	r10, r10
  e4:	a2 f8       	bld	r10, 2
  e6:	68 94       	set
  e8:	bb 24       	eor	r11, r11
  ea:	b3 f8       	bld	r11, 3
  ec:	ce 01       	movw	r24, r28
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	6c 01       	movw	r12, r24
  f2:	89 82       	std	Y+1, r8	; 0x01
  f4:	9a 82       	std	Y+2, r9	; 0x02
  f6:	ab 82       	std	Y+3, r10	; 0x03
  f8:	bc 82       	std	Y+4, r11	; 0x04
  fa:	8e 01       	movw	r16, r28
  fc:	0b 5f       	subi	r16, 0xFB	; 251
  fe:	1f 4f       	sbci	r17, 0xFF	; 255
 100:	76 01       	movw	r14, r12
			
		for (uint8_t k = 0; k < 4; k++)
		{
			delay_125ms(arr[k]);
 102:	f7 01       	movw	r30, r14
 104:	81 91       	ld	r24, Z+
 106:	7f 01       	movw	r14, r30
 108:	0e 94 42 00 	call	0x84	; 0x84 <delay_125ms>

    while (1) 
    {
		uint8_t arr[] = {1, 2, 4, 8};
			
		for (uint8_t k = 0; k < 4; k++)
 10c:	e0 16       	cp	r14, r16
 10e:	f1 06       	cpc	r15, r17
 110:	c1 f7       	brne	.-16     	; 0x102 <main+0x3c>
		{
			delay_125ms(arr[k]);
		}
		for (uint8_t k = 4; k >= 1; k--)
		{
			delay_125ms(arr[k - 1]);
 112:	f8 01       	movw	r30, r16
 114:	82 91       	ld	r24, -Z
 116:	8f 01       	movw	r16, r30
 118:	0e 94 42 00 	call	0x84	; 0x84 <delay_125ms>
			
		for (uint8_t k = 0; k < 4; k++)
		{
			delay_125ms(arr[k]);
		}
		for (uint8_t k = 4; k >= 1; k--)
 11c:	0c 15       	cp	r16, r12
 11e:	1d 05       	cpc	r17, r13
 120:	c1 f7       	brne	.-16     	; 0x112 <main+0x4c>
 122:	e7 cf       	rjmp	.-50     	; 0xf2 <main+0x2c>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
