
phase_correct_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000915  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081f  00000000  00000000  00000b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000359  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042b  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  00001b63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001baf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 42 00 	call	0x84	; 0x84 <main>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <main>:


int main(void)
{
	uint8_t duty = 0;
	init_fast_pwm();
  84:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_fast_pwm>
	
    /* Replace with your application code */
    while (1) 
    {
		duty +=1;
		set_duty(duty);
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	0e 94 61 00 	call	0xc2	; 0xc2 <set_duty>
	init_fast_pwm();
	
    /* Replace with your application code */
    while (1) 
    {
		duty +=1;
  8e:	c1 e0       	ldi	r28, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <main+0x10>
		set_duty(duty);
		if(duty > 100){
			duty = 0;
  92:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	81 ee       	ldi	r24, 0xE1	; 225
  98:	94 e0       	ldi	r25, 0x04	; 4
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x16>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x20>
  a4:	00 00       	nop
	init_fast_pwm();
	
    /* Replace with your application code */
    while (1) 
    {
		duty +=1;
  a6:	cf 5f       	subi	r28, 0xFF	; 255
		set_duty(duty);
  a8:	8c 2f       	mov	r24, r28
  aa:	0e 94 61 00 	call	0xc2	; 0xc2 <set_duty>
		if(duty > 100){
  ae:	c5 36       	cpi	r28, 0x65	; 101
  b0:	80 f7       	brcc	.-32     	; 0x92 <main+0xe>
  b2:	f0 cf       	rjmp	.-32     	; 0x94 <main+0x10>

000000b4 <init_fast_pwm>:

void init_phase_correct_pwm(){
	
	DDRD = 1 << 6;
	TCCR0A = 0b10000011;
	TCCR0B = 0b00000001;
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	8a b9       	out	0x0a, r24	; 10
  b8:	83 e8       	ldi	r24, 0x83	; 131
  ba:	84 bd       	out	0x24, r24	; 36
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	85 bd       	out	0x25, r24	; 37
  c0:	08 95       	ret

000000c2 <set_duty>:
	
}

void set_duty(uint8_t duty){
	OCR0A = (duty * 255)/100;
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	82 9f       	mul	r24, r18
  c6:	c0 01       	movw	r24, r0
  c8:	11 24       	eor	r1, r1
  ca:	64 e6       	ldi	r22, 0x64	; 100
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	0e 94 6b 00 	call	0xd6	; 0xd6 <__divmodhi4>
  d2:	67 bd       	out	0x27, r22	; 39
  d4:	08 95       	ret

000000d6 <__divmodhi4>:
  d6:	97 fb       	bst	r25, 7
  d8:	07 2e       	mov	r0, r23
  da:	16 f4       	brtc	.+4      	; 0xe0 <__divmodhi4+0xa>
  dc:	00 94       	com	r0
  de:	07 d0       	rcall	.+14     	; 0xee <__divmodhi4_neg1>
  e0:	77 fd       	sbrc	r23, 7
  e2:	09 d0       	rcall	.+18     	; 0xf6 <__divmodhi4_neg2>
  e4:	0e 94 7f 00 	call	0xfe	; 0xfe <__udivmodhi4>
  e8:	07 fc       	sbrc	r0, 7
  ea:	05 d0       	rcall	.+10     	; 0xf6 <__divmodhi4_neg2>
  ec:	3e f4       	brtc	.+14     	; 0xfc <__divmodhi4_exit>

000000ee <__divmodhi4_neg1>:
  ee:	90 95       	com	r25
  f0:	81 95       	neg	r24
  f2:	9f 4f       	sbci	r25, 0xFF	; 255
  f4:	08 95       	ret

000000f6 <__divmodhi4_neg2>:
  f6:	70 95       	com	r23
  f8:	61 95       	neg	r22
  fa:	7f 4f       	sbci	r23, 0xFF	; 255

000000fc <__divmodhi4_exit>:
  fc:	08 95       	ret

000000fe <__udivmodhi4>:
  fe:	aa 1b       	sub	r26, r26
 100:	bb 1b       	sub	r27, r27
 102:	51 e1       	ldi	r21, 0x11	; 17
 104:	07 c0       	rjmp	.+14     	; 0x114 <__udivmodhi4_ep>

00000106 <__udivmodhi4_loop>:
 106:	aa 1f       	adc	r26, r26
 108:	bb 1f       	adc	r27, r27
 10a:	a6 17       	cp	r26, r22
 10c:	b7 07       	cpc	r27, r23
 10e:	10 f0       	brcs	.+4      	; 0x114 <__udivmodhi4_ep>
 110:	a6 1b       	sub	r26, r22
 112:	b7 0b       	sbc	r27, r23

00000114 <__udivmodhi4_ep>:
 114:	88 1f       	adc	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	5a 95       	dec	r21
 11a:	a9 f7       	brne	.-22     	; 0x106 <__udivmodhi4_loop>
 11c:	80 95       	com	r24
 11e:	90 95       	com	r25
 120:	bc 01       	movw	r22, r24
 122:	cd 01       	movw	r24, r26
 124:	08 95       	ret

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
