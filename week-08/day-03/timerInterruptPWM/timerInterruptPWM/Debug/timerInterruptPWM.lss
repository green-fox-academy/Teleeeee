
timerInterruptPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000230  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089d  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d4  00000000  00000000  00000b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f2  00000000  00000000  00001349  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  0000163c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000410  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000134  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_8>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a2 30       	cpi	r26, 0x02	; 2
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>
  88:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  8c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <init>:




void init(){
	DDRD = 1 << 6;
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	8a b9       	out	0x0a, r24	; 10
	
	sei();
  98:	78 94       	sei
	TCCR0A = 0b10000011;
  9a:	83 e8       	ldi	r24, 0x83	; 131
  9c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011;
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	85 bd       	out	0x25, r24	; 37
	TCCR2A = 0b00000000;
  a2:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TCCR2B = 0b00000011;
  a6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	TIFR2  = 0b00000010;
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	87 bb       	out	0x17, r24	; 23
	TIMSK2 = 0b00000100;
  ae:	84 e0       	ldi	r24, 0x04	; 4
  b0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	OCR2B = 100;
  b4:	84 e6       	ldi	r24, 0x64	; 100
  b6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
  ba:	08 95       	ret

000000bc <set_duty>:
}

void set_duty(uint8_t duty){
	OCR0A = (duty * 255)/ 100;
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	82 9f       	mul	r24, r18
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	64 e6       	ldi	r22, 0x64	; 100
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	0e 94 b4 00 	call	0x168	; 0x168 <__divmodhi4>
  cc:	67 bd       	out	0x27, r22	; 39
  ce:	08 95       	ret

000000d0 <__vector_8>:
}

uint8_t duty = 0;
uint8_t flag = 0;

ISR(TIMER2_COMPB_vect){
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	if(flag == 1){
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	51 f4       	brne	.+20     	; 0x10e <__vector_8+0x3e>
     duty += 5;	
  fa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <duty>
  fe:	8b 5f       	subi	r24, 0xFB	; 251
 100:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <duty>
	  if(duty > 100){
 104:	85 36       	cpi	r24, 0x65	; 101
 106:	78 f0       	brcs	.+30     	; 0x126 <__vector_8+0x56>
		  flag = 0;
 108:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__vector_8+0x42>
	  }
	}
	
	if(flag == 0){
 10e:	81 11       	cpse	r24, r1
 110:	0a c0       	rjmp	.+20     	; 0x126 <__vector_8+0x56>
		duty -= 5;
 112:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <duty>
 116:	85 50       	subi	r24, 0x05	; 5
 118:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <duty>
		if(duty < 10){
 11c:	8a 30       	cpi	r24, 0x0A	; 10
 11e:	18 f4       	brcc	.+6      	; 0x126 <__vector_8+0x56>
			flag = 1;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
	}
	
	set_duty(duty);
 126:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <duty>
 12a:	0e 94 5e 00 	call	0xbc	; 0xbc <set_duty>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	81 ee       	ldi	r24, 0xE1	; 225
 132:	94 e0       	ldi	r25, 0x04	; 4
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <__vector_8+0x64>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <__vector_8+0x6e>
 13e:	00 00       	nop
	_delay_ms(100);
}
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	bf 91       	pop	r27
 146:	af 91       	pop	r26
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	7f 91       	pop	r23
 14e:	6f 91       	pop	r22
 150:	5f 91       	pop	r21
 152:	4f 91       	pop	r20
 154:	3f 91       	pop	r19
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <main>:

int main(void)
{
    uint8_t duty = 0;
	init();
 162:	0e 94 4a 00 	call	0x94	; 0x94 <init>
 166:	ff cf       	rjmp	.-2      	; 0x166 <main+0x4>

00000168 <__divmodhi4>:
 168:	97 fb       	bst	r25, 7
 16a:	07 2e       	mov	r0, r23
 16c:	16 f4       	brtc	.+4      	; 0x172 <__divmodhi4+0xa>
 16e:	00 94       	com	r0
 170:	07 d0       	rcall	.+14     	; 0x180 <__divmodhi4_neg1>
 172:	77 fd       	sbrc	r23, 7
 174:	09 d0       	rcall	.+18     	; 0x188 <__divmodhi4_neg2>
 176:	0e 94 c8 00 	call	0x190	; 0x190 <__udivmodhi4>
 17a:	07 fc       	sbrc	r0, 7
 17c:	05 d0       	rcall	.+10     	; 0x188 <__divmodhi4_neg2>
 17e:	3e f4       	brtc	.+14     	; 0x18e <__divmodhi4_exit>

00000180 <__divmodhi4_neg1>:
 180:	90 95       	com	r25
 182:	81 95       	neg	r24
 184:	9f 4f       	sbci	r25, 0xFF	; 255
 186:	08 95       	ret

00000188 <__divmodhi4_neg2>:
 188:	70 95       	com	r23
 18a:	61 95       	neg	r22
 18c:	7f 4f       	sbci	r23, 0xFF	; 255

0000018e <__divmodhi4_exit>:
 18e:	08 95       	ret

00000190 <__udivmodhi4>:
 190:	aa 1b       	sub	r26, r26
 192:	bb 1b       	sub	r27, r27
 194:	51 e1       	ldi	r21, 0x11	; 17
 196:	07 c0       	rjmp	.+14     	; 0x1a6 <__udivmodhi4_ep>

00000198 <__udivmodhi4_loop>:
 198:	aa 1f       	adc	r26, r26
 19a:	bb 1f       	adc	r27, r27
 19c:	a6 17       	cp	r26, r22
 19e:	b7 07       	cpc	r27, r23
 1a0:	10 f0       	brcs	.+4      	; 0x1a6 <__udivmodhi4_ep>
 1a2:	a6 1b       	sub	r26, r22
 1a4:	b7 0b       	sbc	r27, r23

000001a6 <__udivmodhi4_ep>:
 1a6:	88 1f       	adc	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	5a 95       	dec	r21
 1ac:	a9 f7       	brne	.-22     	; 0x198 <__udivmodhi4_loop>
 1ae:	80 95       	com	r24
 1b0:	90 95       	com	r25
 1b2:	bc 01       	movw	r22, r24
 1b4:	cd 01       	movw	r24, r26
 1b6:	08 95       	ret

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
