
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000860  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bc  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ac  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b8  00000000  00000000  0000191e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000019d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <init>:
#define F_CPU 16000000
#include <util/delay.h>


void init(){
	DDRD = 1 << 6;
  84:	80 e4       	ldi	r24, 0x40	; 64
  86:	8a b9       	out	0x0a, r24	; 10
	TCCR0B = 0b00000010;
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	85 bd       	out	0x25, r24	; 37
	TCCR0A = 0b10000011;
  8c:	83 e8       	ldi	r24, 0x83	; 131
  8e:	84 bd       	out	0x24, r24	; 36
  90:	08 95       	ret

00000092 <cicle>:
	
}

void cicle(uint8_t duty){
	OCR0A = (duty * 255) /100;
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	82 9f       	mul	r24, r18
  96:	c0 01       	movw	r24, r0
  98:	11 24       	eor	r1, r1
  9a:	64 e6       	ldi	r22, 0x64	; 100
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	0e 94 71 00 	call	0xe2	; 0xe2 <__divmodhi4>
  a2:	67 bd       	out	0x27, r22	; 39
  a4:	08 95       	ret

000000a6 <main>:
}


int main(void)
{
    init();
  a6:	0e 94 42 00 	call	0x84	; 0x84 <init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	83 ec       	ldi	r24, 0xC3	; 195
  ae:	99 e0       	ldi	r25, 0x09	; 9
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0xa>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x14>
  ba:	00 00       	nop
	uint8_t duty = 0;
    while (1) 
    {
		duty +=5;
  bc:	c5 e0       	ldi	r28, 0x05	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <main+0x1c>
		_delay_ms(200);
		if(duty > 100){
			duty = 0;
  c0:	c0 e0       	ldi	r28, 0x00	; 0
		}
		cicle(duty);
  c2:	8c 2f       	mov	r24, r28
  c4:	0e 94 49 00 	call	0x92	; 0x92 <cicle>
{
    init();
	uint8_t duty = 0;
    while (1) 
    {
		duty +=5;
  c8:	cb 5f       	subi	r28, 0xFB	; 251
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	83 ec       	ldi	r24, 0xC3	; 195
  ce:	99 e0       	ldi	r25, 0x09	; 9
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x2a>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x34>
  da:	00 00       	nop
		_delay_ms(200);
		if(duty > 100){
  dc:	c5 36       	cpi	r28, 0x65	; 101
  de:	80 f7       	brcc	.-32     	; 0xc0 <main+0x1a>
  e0:	f0 cf       	rjmp	.-32     	; 0xc2 <main+0x1c>

000000e2 <__divmodhi4>:
  e2:	97 fb       	bst	r25, 7
  e4:	07 2e       	mov	r0, r23
  e6:	16 f4       	brtc	.+4      	; 0xec <__divmodhi4+0xa>
  e8:	00 94       	com	r0
  ea:	07 d0       	rcall	.+14     	; 0xfa <__divmodhi4_neg1>
  ec:	77 fd       	sbrc	r23, 7
  ee:	09 d0       	rcall	.+18     	; 0x102 <__divmodhi4_neg2>
  f0:	0e 94 85 00 	call	0x10a	; 0x10a <__udivmodhi4>
  f4:	07 fc       	sbrc	r0, 7
  f6:	05 d0       	rcall	.+10     	; 0x102 <__divmodhi4_neg2>
  f8:	3e f4       	brtc	.+14     	; 0x108 <__divmodhi4_exit>

000000fa <__divmodhi4_neg1>:
  fa:	90 95       	com	r25
  fc:	81 95       	neg	r24
  fe:	9f 4f       	sbci	r25, 0xFF	; 255
 100:	08 95       	ret

00000102 <__divmodhi4_neg2>:
 102:	70 95       	com	r23
 104:	61 95       	neg	r22
 106:	7f 4f       	sbci	r23, 0xFF	; 255

00000108 <__divmodhi4_exit>:
 108:	08 95       	ret

0000010a <__udivmodhi4>:
 10a:	aa 1b       	sub	r26, r26
 10c:	bb 1b       	sub	r27, r27
 10e:	51 e1       	ldi	r21, 0x11	; 17
 110:	07 c0       	rjmp	.+14     	; 0x120 <__udivmodhi4_ep>

00000112 <__udivmodhi4_loop>:
 112:	aa 1f       	adc	r26, r26
 114:	bb 1f       	adc	r27, r27
 116:	a6 17       	cp	r26, r22
 118:	b7 07       	cpc	r27, r23
 11a:	10 f0       	brcs	.+4      	; 0x120 <__udivmodhi4_ep>
 11c:	a6 1b       	sub	r26, r22
 11e:	b7 0b       	sbc	r27, r23

00000120 <__udivmodhi4_ep>:
 120:	88 1f       	adc	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	5a 95       	dec	r21
 126:	a9 f7       	brne	.-22     	; 0x112 <__udivmodhi4_loop>
 128:	80 95       	com	r24
 12a:	90 95       	com	r25
 12c:	bc 01       	movw	r22, r24
 12e:	cd 01       	movw	r24, r26
 130:	08 95       	ret

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
